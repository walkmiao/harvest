// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/equipment/v1/equipment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EquipmentClient is the client API for Equipment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EquipmentClient interface {
	CreateEquipment(ctx context.Context, in *CreateEquipmentRequest, opts ...grpc.CallOption) (*CreateEquipmentReply, error)
	UpdateEquipment(ctx context.Context, in *UpdateEquipmentRequest, opts ...grpc.CallOption) (*UpdateEquipmentReply, error)
	DeleteEquipment(ctx context.Context, in *DeleteEquipmentRequest, opts ...grpc.CallOption) (*DeleteEquipmentReply, error)
	GetEquipment(ctx context.Context, in *GetEquipmentRequest, opts ...grpc.CallOption) (*GetEquipmentReply, error)
	ListEquipment(ctx context.Context, in *ListEquipmentRequest, opts ...grpc.CallOption) (*ListEquipmentReply, error)
}

type equipmentClient struct {
	cc grpc.ClientConnInterface
}

func NewEquipmentClient(cc grpc.ClientConnInterface) EquipmentClient {
	return &equipmentClient{cc}
}

func (c *equipmentClient) CreateEquipment(ctx context.Context, in *CreateEquipmentRequest, opts ...grpc.CallOption) (*CreateEquipmentReply, error) {
	out := new(CreateEquipmentReply)
	err := c.cc.Invoke(ctx, "/equipment.v1.Equipment/CreateEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) UpdateEquipment(ctx context.Context, in *UpdateEquipmentRequest, opts ...grpc.CallOption) (*UpdateEquipmentReply, error) {
	out := new(UpdateEquipmentReply)
	err := c.cc.Invoke(ctx, "/equipment.v1.Equipment/UpdateEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) DeleteEquipment(ctx context.Context, in *DeleteEquipmentRequest, opts ...grpc.CallOption) (*DeleteEquipmentReply, error) {
	out := new(DeleteEquipmentReply)
	err := c.cc.Invoke(ctx, "/equipment.v1.Equipment/DeleteEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) GetEquipment(ctx context.Context, in *GetEquipmentRequest, opts ...grpc.CallOption) (*GetEquipmentReply, error) {
	out := new(GetEquipmentReply)
	err := c.cc.Invoke(ctx, "/equipment.v1.Equipment/GetEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) ListEquipment(ctx context.Context, in *ListEquipmentRequest, opts ...grpc.CallOption) (*ListEquipmentReply, error) {
	out := new(ListEquipmentReply)
	err := c.cc.Invoke(ctx, "/equipment.v1.Equipment/ListEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquipmentServer is the server API for Equipment service.
// All implementations must embed UnimplementedEquipmentServer
// for forward compatibility
type EquipmentServer interface {
	CreateEquipment(context.Context, *CreateEquipmentRequest) (*CreateEquipmentReply, error)
	UpdateEquipment(context.Context, *UpdateEquipmentRequest) (*UpdateEquipmentReply, error)
	DeleteEquipment(context.Context, *DeleteEquipmentRequest) (*DeleteEquipmentReply, error)
	GetEquipment(context.Context, *GetEquipmentRequest) (*GetEquipmentReply, error)
	ListEquipment(context.Context, *ListEquipmentRequest) (*ListEquipmentReply, error)
	mustEmbedUnimplementedEquipmentServer()
}

// UnimplementedEquipmentServer must be embedded to have forward compatible implementations.
type UnimplementedEquipmentServer struct {
}

func (UnimplementedEquipmentServer) CreateEquipment(context.Context, *CreateEquipmentRequest) (*CreateEquipmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEquipment not implemented")
}
func (UnimplementedEquipmentServer) UpdateEquipment(context.Context, *UpdateEquipmentRequest) (*UpdateEquipmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEquipment not implemented")
}
func (UnimplementedEquipmentServer) DeleteEquipment(context.Context, *DeleteEquipmentRequest) (*DeleteEquipmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEquipment not implemented")
}
func (UnimplementedEquipmentServer) GetEquipment(context.Context, *GetEquipmentRequest) (*GetEquipmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquipment not implemented")
}
func (UnimplementedEquipmentServer) ListEquipment(context.Context, *ListEquipmentRequest) (*ListEquipmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEquipment not implemented")
}
func (UnimplementedEquipmentServer) mustEmbedUnimplementedEquipmentServer() {}

// UnsafeEquipmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EquipmentServer will
// result in compilation errors.
type UnsafeEquipmentServer interface {
	mustEmbedUnimplementedEquipmentServer()
}

func RegisterEquipmentServer(s grpc.ServiceRegistrar, srv EquipmentServer) {
	s.RegisterService(&Equipment_ServiceDesc, srv)
}

func _Equipment_CreateEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).CreateEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/equipment.v1.Equipment/CreateEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).CreateEquipment(ctx, req.(*CreateEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_UpdateEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).UpdateEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/equipment.v1.Equipment/UpdateEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).UpdateEquipment(ctx, req.(*UpdateEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_DeleteEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).DeleteEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/equipment.v1.Equipment/DeleteEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).DeleteEquipment(ctx, req.(*DeleteEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_GetEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).GetEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/equipment.v1.Equipment/GetEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).GetEquipment(ctx, req.(*GetEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_ListEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).ListEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/equipment.v1.Equipment/ListEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).ListEquipment(ctx, req.(*ListEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Equipment_ServiceDesc is the grpc.ServiceDesc for Equipment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Equipment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "equipment.v1.Equipment",
	HandlerType: (*EquipmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEquipment",
			Handler:    _Equipment_CreateEquipment_Handler,
		},
		{
			MethodName: "UpdateEquipment",
			Handler:    _Equipment_UpdateEquipment_Handler,
		},
		{
			MethodName: "DeleteEquipment",
			Handler:    _Equipment_DeleteEquipment_Handler,
		},
		{
			MethodName: "GetEquipment",
			Handler:    _Equipment_GetEquipment_Handler,
		},
		{
			MethodName: "ListEquipment",
			Handler:    _Equipment_ListEquipment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/equipment/v1/equipment.proto",
}
