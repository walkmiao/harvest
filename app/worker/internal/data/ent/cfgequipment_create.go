// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"harvest/app/worker/internal/data/ent/cfgequipment"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CfgEquipmentCreate is the builder for creating a CfgEquipment entity.
type CfgEquipmentCreate struct {
	config
	mutation *CfgEquipmentMutation
	hooks    []Hook
}

// SetEquipid sets the "equipid" field.
func (cec *CfgEquipmentCreate) SetEquipid(i int) *CfgEquipmentCreate {
	cec.mutation.SetEquipid(i)
	return cec
}

// SetPortid sets the "portid" field.
func (cec *CfgEquipmentCreate) SetPortid(i int) *CfgEquipmentCreate {
	cec.mutation.SetPortid(i)
	return cec
}

// SetMonitorunitid sets the "monitorunitid" field.
func (cec *CfgEquipmentCreate) SetMonitorunitid(i int) *CfgEquipmentCreate {
	cec.mutation.SetMonitorunitid(i)
	return cec
}

// SetEquiptemplateid sets the "equiptemplateid" field.
func (cec *CfgEquipmentCreate) SetEquiptemplateid(i int) *CfgEquipmentCreate {
	cec.mutation.SetEquiptemplateid(i)
	return cec
}

// SetEquipname sets the "equipname" field.
func (cec *CfgEquipmentCreate) SetEquipname(s string) *CfgEquipmentCreate {
	cec.mutation.SetEquipname(s)
	return cec
}

// SetExportsetting sets the "exportsetting" field.
func (cec *CfgEquipmentCreate) SetExportsetting(s string) *CfgEquipmentCreate {
	cec.mutation.SetExportsetting(s)
	return cec
}

// SetNillableExportsetting sets the "exportsetting" field if the given value is not nil.
func (cec *CfgEquipmentCreate) SetNillableExportsetting(s *string) *CfgEquipmentCreate {
	if s != nil {
		cec.SetExportsetting(*s)
	}
	return cec
}

// SetEventlocked sets the "eventlocked" field.
func (cec *CfgEquipmentCreate) SetEventlocked(i int) *CfgEquipmentCreate {
	cec.mutation.SetEventlocked(i)
	return cec
}

// SetNillableEventlocked sets the "eventlocked" field if the given value is not nil.
func (cec *CfgEquipmentCreate) SetNillableEventlocked(i *int) *CfgEquipmentCreate {
	if i != nil {
		cec.SetEventlocked(*i)
	}
	return cec
}

// SetControllocked sets the "controllocked" field.
func (cec *CfgEquipmentCreate) SetControllocked(i int) *CfgEquipmentCreate {
	cec.mutation.SetControllocked(i)
	return cec
}

// SetNillableControllocked sets the "controllocked" field if the given value is not nil.
func (cec *CfgEquipmentCreate) SetNillableControllocked(i *int) *CfgEquipmentCreate {
	if i != nil {
		cec.SetControllocked(*i)
	}
	return cec
}

// SetExtendfield1 sets the "extendfield1" field.
func (cec *CfgEquipmentCreate) SetExtendfield1(s string) *CfgEquipmentCreate {
	cec.mutation.SetExtendfield1(s)
	return cec
}

// SetNillableExtendfield1 sets the "extendfield1" field if the given value is not nil.
func (cec *CfgEquipmentCreate) SetNillableExtendfield1(s *string) *CfgEquipmentCreate {
	if s != nil {
		cec.SetExtendfield1(*s)
	}
	return cec
}

// SetExtendfield2 sets the "extendfield2" field.
func (cec *CfgEquipmentCreate) SetExtendfield2(s string) *CfgEquipmentCreate {
	cec.mutation.SetExtendfield2(s)
	return cec
}

// SetNillableExtendfield2 sets the "extendfield2" field if the given value is not nil.
func (cec *CfgEquipmentCreate) SetNillableExtendfield2(s *string) *CfgEquipmentCreate {
	if s != nil {
		cec.SetExtendfield2(*s)
	}
	return cec
}

// SetExtendfield3 sets the "extendfield3" field.
func (cec *CfgEquipmentCreate) SetExtendfield3(s string) *CfgEquipmentCreate {
	cec.mutation.SetExtendfield3(s)
	return cec
}

// SetNillableExtendfield3 sets the "extendfield3" field if the given value is not nil.
func (cec *CfgEquipmentCreate) SetNillableExtendfield3(s *string) *CfgEquipmentCreate {
	if s != nil {
		cec.SetExtendfield3(*s)
	}
	return cec
}

// SetExtendfield4 sets the "extendfield4" field.
func (cec *CfgEquipmentCreate) SetExtendfield4(s string) *CfgEquipmentCreate {
	cec.mutation.SetExtendfield4(s)
	return cec
}

// SetNillableExtendfield4 sets the "extendfield4" field if the given value is not nil.
func (cec *CfgEquipmentCreate) SetNillableExtendfield4(s *string) *CfgEquipmentCreate {
	if s != nil {
		cec.SetExtendfield4(*s)
	}
	return cec
}

// SetExtendfield5 sets the "extendfield5" field.
func (cec *CfgEquipmentCreate) SetExtendfield5(s string) *CfgEquipmentCreate {
	cec.mutation.SetExtendfield5(s)
	return cec
}

// SetNillableExtendfield5 sets the "extendfield5" field if the given value is not nil.
func (cec *CfgEquipmentCreate) SetNillableExtendfield5(s *string) *CfgEquipmentCreate {
	if s != nil {
		cec.SetExtendfield5(*s)
	}
	return cec
}

// SetRoomid sets the "roomid" field.
func (cec *CfgEquipmentCreate) SetRoomid(i int) *CfgEquipmentCreate {
	cec.mutation.SetRoomid(i)
	return cec
}

// SetEquiptype sets the "equiptype" field.
func (cec *CfgEquipmentCreate) SetEquiptype(i int) *CfgEquipmentCreate {
	cec.mutation.SetEquiptype(i)
	return cec
}

// SetSampleinterval sets the "sampleinterval" field.
func (cec *CfgEquipmentCreate) SetSampleinterval(i int) *CfgEquipmentCreate {
	cec.mutation.SetSampleinterval(i)
	return cec
}

// SetLibname sets the "libname" field.
func (cec *CfgEquipmentCreate) SetLibname(s string) *CfgEquipmentCreate {
	cec.mutation.SetLibname(s)
	return cec
}

// SetDescription sets the "description" field.
func (cec *CfgEquipmentCreate) SetDescription(s string) *CfgEquipmentCreate {
	cec.mutation.SetDescription(s)
	return cec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cec *CfgEquipmentCreate) SetNillableDescription(s *string) *CfgEquipmentCreate {
	if s != nil {
		cec.SetDescription(*s)
	}
	return cec
}

// SetEquipaddress sets the "equipaddress" field.
func (cec *CfgEquipmentCreate) SetEquipaddress(i int) *CfgEquipmentCreate {
	cec.mutation.SetEquipaddress(i)
	return cec
}

// SetNillableEquipaddress sets the "equipaddress" field if the given value is not nil.
func (cec *CfgEquipmentCreate) SetNillableEquipaddress(i *int) *CfgEquipmentCreate {
	if i != nil {
		cec.SetEquipaddress(*i)
	}
	return cec
}

// Mutation returns the CfgEquipmentMutation object of the builder.
func (cec *CfgEquipmentCreate) Mutation() *CfgEquipmentMutation {
	return cec.mutation
}

// Save creates the CfgEquipment in the database.
func (cec *CfgEquipmentCreate) Save(ctx context.Context) (*CfgEquipment, error) {
	var (
		err  error
		node *CfgEquipment
	)
	cec.defaults()
	if len(cec.hooks) == 0 {
		if err = cec.check(); err != nil {
			return nil, err
		}
		node, err = cec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CfgEquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cec.check(); err != nil {
				return nil, err
			}
			cec.mutation = mutation
			if node, err = cec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cec.hooks) - 1; i >= 0; i-- {
			if cec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CfgEquipment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CfgEquipmentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cec *CfgEquipmentCreate) SaveX(ctx context.Context) *CfgEquipment {
	v, err := cec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cec *CfgEquipmentCreate) Exec(ctx context.Context) error {
	_, err := cec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cec *CfgEquipmentCreate) ExecX(ctx context.Context) {
	if err := cec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cec *CfgEquipmentCreate) defaults() {
	if _, ok := cec.mutation.Eventlocked(); !ok {
		v := cfgequipment.DefaultEventlocked
		cec.mutation.SetEventlocked(v)
	}
	if _, ok := cec.mutation.Controllocked(); !ok {
		v := cfgequipment.DefaultControllocked
		cec.mutation.SetControllocked(v)
	}
	if _, ok := cec.mutation.Equipaddress(); !ok {
		v := cfgequipment.DefaultEquipaddress
		cec.mutation.SetEquipaddress(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cec *CfgEquipmentCreate) check() error {
	if _, ok := cec.mutation.Equipid(); !ok {
		return &ValidationError{Name: "equipid", err: errors.New(`ent: missing required field "CfgEquipment.equipid"`)}
	}
	if _, ok := cec.mutation.Portid(); !ok {
		return &ValidationError{Name: "portid", err: errors.New(`ent: missing required field "CfgEquipment.portid"`)}
	}
	if _, ok := cec.mutation.Monitorunitid(); !ok {
		return &ValidationError{Name: "monitorunitid", err: errors.New(`ent: missing required field "CfgEquipment.monitorunitid"`)}
	}
	if _, ok := cec.mutation.Equiptemplateid(); !ok {
		return &ValidationError{Name: "equiptemplateid", err: errors.New(`ent: missing required field "CfgEquipment.equiptemplateid"`)}
	}
	if _, ok := cec.mutation.Equipname(); !ok {
		return &ValidationError{Name: "equipname", err: errors.New(`ent: missing required field "CfgEquipment.equipname"`)}
	}
	if _, ok := cec.mutation.Eventlocked(); !ok {
		return &ValidationError{Name: "eventlocked", err: errors.New(`ent: missing required field "CfgEquipment.eventlocked"`)}
	}
	if _, ok := cec.mutation.Controllocked(); !ok {
		return &ValidationError{Name: "controllocked", err: errors.New(`ent: missing required field "CfgEquipment.controllocked"`)}
	}
	if _, ok := cec.mutation.Roomid(); !ok {
		return &ValidationError{Name: "roomid", err: errors.New(`ent: missing required field "CfgEquipment.roomid"`)}
	}
	if _, ok := cec.mutation.Equiptype(); !ok {
		return &ValidationError{Name: "equiptype", err: errors.New(`ent: missing required field "CfgEquipment.equiptype"`)}
	}
	if _, ok := cec.mutation.Sampleinterval(); !ok {
		return &ValidationError{Name: "sampleinterval", err: errors.New(`ent: missing required field "CfgEquipment.sampleinterval"`)}
	}
	if _, ok := cec.mutation.Libname(); !ok {
		return &ValidationError{Name: "libname", err: errors.New(`ent: missing required field "CfgEquipment.libname"`)}
	}
	if _, ok := cec.mutation.Equipaddress(); !ok {
		return &ValidationError{Name: "equipaddress", err: errors.New(`ent: missing required field "CfgEquipment.equipaddress"`)}
	}
	return nil
}

func (cec *CfgEquipmentCreate) sqlSave(ctx context.Context) (*CfgEquipment, error) {
	_node, _spec := cec.createSpec()
	if err := sqlgraph.CreateNode(ctx, cec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cec *CfgEquipmentCreate) createSpec() (*CfgEquipment, *sqlgraph.CreateSpec) {
	var (
		_node = &CfgEquipment{config: cec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cfgequipment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cfgequipment.FieldID,
			},
		}
	)
	if value, ok := cec.mutation.Equipid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquipid,
		})
		_node.Equipid = value
	}
	if value, ok := cec.mutation.Portid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldPortid,
		})
		_node.Portid = value
	}
	if value, ok := cec.mutation.Monitorunitid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldMonitorunitid,
		})
		_node.Monitorunitid = value
	}
	if value, ok := cec.mutation.Equiptemplateid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquiptemplateid,
		})
		_node.Equiptemplateid = value
	}
	if value, ok := cec.mutation.Equipname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldEquipname,
		})
		_node.Equipname = value
	}
	if value, ok := cec.mutation.Exportsetting(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExportsetting,
		})
		_node.Exportsetting = &value
	}
	if value, ok := cec.mutation.Eventlocked(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEventlocked,
		})
		_node.Eventlocked = value
	}
	if value, ok := cec.mutation.Controllocked(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldControllocked,
		})
		_node.Controllocked = value
	}
	if value, ok := cec.mutation.Extendfield1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield1,
		})
		_node.Extendfield1 = value
	}
	if value, ok := cec.mutation.Extendfield2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield2,
		})
		_node.Extendfield2 = value
	}
	if value, ok := cec.mutation.Extendfield3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield3,
		})
		_node.Extendfield3 = value
	}
	if value, ok := cec.mutation.Extendfield4(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield4,
		})
		_node.Extendfield4 = value
	}
	if value, ok := cec.mutation.Extendfield5(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield5,
		})
		_node.Extendfield5 = value
	}
	if value, ok := cec.mutation.Roomid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldRoomid,
		})
		_node.Roomid = value
	}
	if value, ok := cec.mutation.Equiptype(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquiptype,
		})
		_node.Equiptype = value
	}
	if value, ok := cec.mutation.Sampleinterval(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldSampleinterval,
		})
		_node.Sampleinterval = value
	}
	if value, ok := cec.mutation.Libname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldLibname,
		})
		_node.Libname = value
	}
	if value, ok := cec.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := cec.mutation.Equipaddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquipaddress,
		})
		_node.Equipaddress = value
	}
	return _node, _spec
}

// CfgEquipmentCreateBulk is the builder for creating many CfgEquipment entities in bulk.
type CfgEquipmentCreateBulk struct {
	config
	builders []*CfgEquipmentCreate
}

// Save creates the CfgEquipment entities in the database.
func (cecb *CfgEquipmentCreateBulk) Save(ctx context.Context) ([]*CfgEquipment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cecb.builders))
	nodes := make([]*CfgEquipment, len(cecb.builders))
	mutators := make([]Mutator, len(cecb.builders))
	for i := range cecb.builders {
		func(i int, root context.Context) {
			builder := cecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CfgEquipmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cecb *CfgEquipmentCreateBulk) SaveX(ctx context.Context) []*CfgEquipment {
	v, err := cecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cecb *CfgEquipmentCreateBulk) Exec(ctx context.Context) error {
	_, err := cecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cecb *CfgEquipmentCreateBulk) ExecX(ctx context.Context) {
	if err := cecb.Exec(ctx); err != nil {
		panic(err)
	}
}
