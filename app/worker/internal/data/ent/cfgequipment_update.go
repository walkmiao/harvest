// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"harvest/app/worker/internal/data/ent/cfgequipment"
	"harvest/app/worker/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CfgEquipmentUpdate is the builder for updating CfgEquipment entities.
type CfgEquipmentUpdate struct {
	config
	hooks    []Hook
	mutation *CfgEquipmentMutation
}

// Where appends a list predicates to the CfgEquipmentUpdate builder.
func (ceu *CfgEquipmentUpdate) Where(ps ...predicate.CfgEquipment) *CfgEquipmentUpdate {
	ceu.mutation.Where(ps...)
	return ceu
}

// SetEquipid sets the "equipid" field.
func (ceu *CfgEquipmentUpdate) SetEquipid(i int) *CfgEquipmentUpdate {
	ceu.mutation.ResetEquipid()
	ceu.mutation.SetEquipid(i)
	return ceu
}

// AddEquipid adds i to the "equipid" field.
func (ceu *CfgEquipmentUpdate) AddEquipid(i int) *CfgEquipmentUpdate {
	ceu.mutation.AddEquipid(i)
	return ceu
}

// SetPortid sets the "portid" field.
func (ceu *CfgEquipmentUpdate) SetPortid(i int) *CfgEquipmentUpdate {
	ceu.mutation.ResetPortid()
	ceu.mutation.SetPortid(i)
	return ceu
}

// AddPortid adds i to the "portid" field.
func (ceu *CfgEquipmentUpdate) AddPortid(i int) *CfgEquipmentUpdate {
	ceu.mutation.AddPortid(i)
	return ceu
}

// SetMonitorunitid sets the "monitorunitid" field.
func (ceu *CfgEquipmentUpdate) SetMonitorunitid(i int) *CfgEquipmentUpdate {
	ceu.mutation.ResetMonitorunitid()
	ceu.mutation.SetMonitorunitid(i)
	return ceu
}

// AddMonitorunitid adds i to the "monitorunitid" field.
func (ceu *CfgEquipmentUpdate) AddMonitorunitid(i int) *CfgEquipmentUpdate {
	ceu.mutation.AddMonitorunitid(i)
	return ceu
}

// SetEquiptemplateid sets the "equiptemplateid" field.
func (ceu *CfgEquipmentUpdate) SetEquiptemplateid(i int) *CfgEquipmentUpdate {
	ceu.mutation.ResetEquiptemplateid()
	ceu.mutation.SetEquiptemplateid(i)
	return ceu
}

// AddEquiptemplateid adds i to the "equiptemplateid" field.
func (ceu *CfgEquipmentUpdate) AddEquiptemplateid(i int) *CfgEquipmentUpdate {
	ceu.mutation.AddEquiptemplateid(i)
	return ceu
}

// SetEquipname sets the "equipname" field.
func (ceu *CfgEquipmentUpdate) SetEquipname(s string) *CfgEquipmentUpdate {
	ceu.mutation.SetEquipname(s)
	return ceu
}

// SetExportsetting sets the "exportsetting" field.
func (ceu *CfgEquipmentUpdate) SetExportsetting(s string) *CfgEquipmentUpdate {
	ceu.mutation.SetExportsetting(s)
	return ceu
}

// SetNillableExportsetting sets the "exportsetting" field if the given value is not nil.
func (ceu *CfgEquipmentUpdate) SetNillableExportsetting(s *string) *CfgEquipmentUpdate {
	if s != nil {
		ceu.SetExportsetting(*s)
	}
	return ceu
}

// ClearExportsetting clears the value of the "exportsetting" field.
func (ceu *CfgEquipmentUpdate) ClearExportsetting() *CfgEquipmentUpdate {
	ceu.mutation.ClearExportsetting()
	return ceu
}

// SetEventlocked sets the "eventlocked" field.
func (ceu *CfgEquipmentUpdate) SetEventlocked(i int) *CfgEquipmentUpdate {
	ceu.mutation.ResetEventlocked()
	ceu.mutation.SetEventlocked(i)
	return ceu
}

// SetNillableEventlocked sets the "eventlocked" field if the given value is not nil.
func (ceu *CfgEquipmentUpdate) SetNillableEventlocked(i *int) *CfgEquipmentUpdate {
	if i != nil {
		ceu.SetEventlocked(*i)
	}
	return ceu
}

// AddEventlocked adds i to the "eventlocked" field.
func (ceu *CfgEquipmentUpdate) AddEventlocked(i int) *CfgEquipmentUpdate {
	ceu.mutation.AddEventlocked(i)
	return ceu
}

// SetControllocked sets the "controllocked" field.
func (ceu *CfgEquipmentUpdate) SetControllocked(i int) *CfgEquipmentUpdate {
	ceu.mutation.ResetControllocked()
	ceu.mutation.SetControllocked(i)
	return ceu
}

// SetNillableControllocked sets the "controllocked" field if the given value is not nil.
func (ceu *CfgEquipmentUpdate) SetNillableControllocked(i *int) *CfgEquipmentUpdate {
	if i != nil {
		ceu.SetControllocked(*i)
	}
	return ceu
}

// AddControllocked adds i to the "controllocked" field.
func (ceu *CfgEquipmentUpdate) AddControllocked(i int) *CfgEquipmentUpdate {
	ceu.mutation.AddControllocked(i)
	return ceu
}

// SetExtendfield1 sets the "extendfield1" field.
func (ceu *CfgEquipmentUpdate) SetExtendfield1(s string) *CfgEquipmentUpdate {
	ceu.mutation.SetExtendfield1(s)
	return ceu
}

// SetNillableExtendfield1 sets the "extendfield1" field if the given value is not nil.
func (ceu *CfgEquipmentUpdate) SetNillableExtendfield1(s *string) *CfgEquipmentUpdate {
	if s != nil {
		ceu.SetExtendfield1(*s)
	}
	return ceu
}

// ClearExtendfield1 clears the value of the "extendfield1" field.
func (ceu *CfgEquipmentUpdate) ClearExtendfield1() *CfgEquipmentUpdate {
	ceu.mutation.ClearExtendfield1()
	return ceu
}

// SetExtendfield2 sets the "extendfield2" field.
func (ceu *CfgEquipmentUpdate) SetExtendfield2(s string) *CfgEquipmentUpdate {
	ceu.mutation.SetExtendfield2(s)
	return ceu
}

// SetNillableExtendfield2 sets the "extendfield2" field if the given value is not nil.
func (ceu *CfgEquipmentUpdate) SetNillableExtendfield2(s *string) *CfgEquipmentUpdate {
	if s != nil {
		ceu.SetExtendfield2(*s)
	}
	return ceu
}

// ClearExtendfield2 clears the value of the "extendfield2" field.
func (ceu *CfgEquipmentUpdate) ClearExtendfield2() *CfgEquipmentUpdate {
	ceu.mutation.ClearExtendfield2()
	return ceu
}

// SetExtendfield3 sets the "extendfield3" field.
func (ceu *CfgEquipmentUpdate) SetExtendfield3(s string) *CfgEquipmentUpdate {
	ceu.mutation.SetExtendfield3(s)
	return ceu
}

// SetNillableExtendfield3 sets the "extendfield3" field if the given value is not nil.
func (ceu *CfgEquipmentUpdate) SetNillableExtendfield3(s *string) *CfgEquipmentUpdate {
	if s != nil {
		ceu.SetExtendfield3(*s)
	}
	return ceu
}

// ClearExtendfield3 clears the value of the "extendfield3" field.
func (ceu *CfgEquipmentUpdate) ClearExtendfield3() *CfgEquipmentUpdate {
	ceu.mutation.ClearExtendfield3()
	return ceu
}

// SetExtendfield4 sets the "extendfield4" field.
func (ceu *CfgEquipmentUpdate) SetExtendfield4(s string) *CfgEquipmentUpdate {
	ceu.mutation.SetExtendfield4(s)
	return ceu
}

// SetNillableExtendfield4 sets the "extendfield4" field if the given value is not nil.
func (ceu *CfgEquipmentUpdate) SetNillableExtendfield4(s *string) *CfgEquipmentUpdate {
	if s != nil {
		ceu.SetExtendfield4(*s)
	}
	return ceu
}

// ClearExtendfield4 clears the value of the "extendfield4" field.
func (ceu *CfgEquipmentUpdate) ClearExtendfield4() *CfgEquipmentUpdate {
	ceu.mutation.ClearExtendfield4()
	return ceu
}

// SetExtendfield5 sets the "extendfield5" field.
func (ceu *CfgEquipmentUpdate) SetExtendfield5(s string) *CfgEquipmentUpdate {
	ceu.mutation.SetExtendfield5(s)
	return ceu
}

// SetNillableExtendfield5 sets the "extendfield5" field if the given value is not nil.
func (ceu *CfgEquipmentUpdate) SetNillableExtendfield5(s *string) *CfgEquipmentUpdate {
	if s != nil {
		ceu.SetExtendfield5(*s)
	}
	return ceu
}

// ClearExtendfield5 clears the value of the "extendfield5" field.
func (ceu *CfgEquipmentUpdate) ClearExtendfield5() *CfgEquipmentUpdate {
	ceu.mutation.ClearExtendfield5()
	return ceu
}

// SetRoomid sets the "roomid" field.
func (ceu *CfgEquipmentUpdate) SetRoomid(i int) *CfgEquipmentUpdate {
	ceu.mutation.ResetRoomid()
	ceu.mutation.SetRoomid(i)
	return ceu
}

// AddRoomid adds i to the "roomid" field.
func (ceu *CfgEquipmentUpdate) AddRoomid(i int) *CfgEquipmentUpdate {
	ceu.mutation.AddRoomid(i)
	return ceu
}

// SetEquiptype sets the "equiptype" field.
func (ceu *CfgEquipmentUpdate) SetEquiptype(i int) *CfgEquipmentUpdate {
	ceu.mutation.ResetEquiptype()
	ceu.mutation.SetEquiptype(i)
	return ceu
}

// AddEquiptype adds i to the "equiptype" field.
func (ceu *CfgEquipmentUpdate) AddEquiptype(i int) *CfgEquipmentUpdate {
	ceu.mutation.AddEquiptype(i)
	return ceu
}

// SetSampleinterval sets the "sampleinterval" field.
func (ceu *CfgEquipmentUpdate) SetSampleinterval(i int) *CfgEquipmentUpdate {
	ceu.mutation.ResetSampleinterval()
	ceu.mutation.SetSampleinterval(i)
	return ceu
}

// AddSampleinterval adds i to the "sampleinterval" field.
func (ceu *CfgEquipmentUpdate) AddSampleinterval(i int) *CfgEquipmentUpdate {
	ceu.mutation.AddSampleinterval(i)
	return ceu
}

// SetLibname sets the "libname" field.
func (ceu *CfgEquipmentUpdate) SetLibname(s string) *CfgEquipmentUpdate {
	ceu.mutation.SetLibname(s)
	return ceu
}

// SetDescription sets the "description" field.
func (ceu *CfgEquipmentUpdate) SetDescription(s string) *CfgEquipmentUpdate {
	ceu.mutation.SetDescription(s)
	return ceu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ceu *CfgEquipmentUpdate) SetNillableDescription(s *string) *CfgEquipmentUpdate {
	if s != nil {
		ceu.SetDescription(*s)
	}
	return ceu
}

// ClearDescription clears the value of the "description" field.
func (ceu *CfgEquipmentUpdate) ClearDescription() *CfgEquipmentUpdate {
	ceu.mutation.ClearDescription()
	return ceu
}

// SetEquipaddress sets the "equipaddress" field.
func (ceu *CfgEquipmentUpdate) SetEquipaddress(i int) *CfgEquipmentUpdate {
	ceu.mutation.ResetEquipaddress()
	ceu.mutation.SetEquipaddress(i)
	return ceu
}

// SetNillableEquipaddress sets the "equipaddress" field if the given value is not nil.
func (ceu *CfgEquipmentUpdate) SetNillableEquipaddress(i *int) *CfgEquipmentUpdate {
	if i != nil {
		ceu.SetEquipaddress(*i)
	}
	return ceu
}

// AddEquipaddress adds i to the "equipaddress" field.
func (ceu *CfgEquipmentUpdate) AddEquipaddress(i int) *CfgEquipmentUpdate {
	ceu.mutation.AddEquipaddress(i)
	return ceu
}

// Mutation returns the CfgEquipmentMutation object of the builder.
func (ceu *CfgEquipmentUpdate) Mutation() *CfgEquipmentMutation {
	return ceu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ceu *CfgEquipmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ceu.hooks) == 0 {
		affected, err = ceu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CfgEquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ceu.mutation = mutation
			affected, err = ceu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ceu.hooks) - 1; i >= 0; i-- {
			if ceu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ceu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ceu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceu *CfgEquipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := ceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceu *CfgEquipmentUpdate) Exec(ctx context.Context) error {
	_, err := ceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceu *CfgEquipmentUpdate) ExecX(ctx context.Context) {
	if err := ceu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ceu *CfgEquipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cfgequipment.Table,
			Columns: cfgequipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cfgequipment.FieldID,
			},
		},
	}
	if ps := ceu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceu.mutation.Equipid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquipid,
		})
	}
	if value, ok := ceu.mutation.AddedEquipid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquipid,
		})
	}
	if value, ok := ceu.mutation.Portid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldPortid,
		})
	}
	if value, ok := ceu.mutation.AddedPortid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldPortid,
		})
	}
	if value, ok := ceu.mutation.Monitorunitid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldMonitorunitid,
		})
	}
	if value, ok := ceu.mutation.AddedMonitorunitid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldMonitorunitid,
		})
	}
	if value, ok := ceu.mutation.Equiptemplateid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquiptemplateid,
		})
	}
	if value, ok := ceu.mutation.AddedEquiptemplateid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquiptemplateid,
		})
	}
	if value, ok := ceu.mutation.Equipname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldEquipname,
		})
	}
	if value, ok := ceu.mutation.Exportsetting(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExportsetting,
		})
	}
	if ceu.mutation.ExportsettingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldExportsetting,
		})
	}
	if value, ok := ceu.mutation.Eventlocked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEventlocked,
		})
	}
	if value, ok := ceu.mutation.AddedEventlocked(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEventlocked,
		})
	}
	if value, ok := ceu.mutation.Controllocked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldControllocked,
		})
	}
	if value, ok := ceu.mutation.AddedControllocked(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldControllocked,
		})
	}
	if value, ok := ceu.mutation.Extendfield1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield1,
		})
	}
	if ceu.mutation.Extendfield1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldExtendfield1,
		})
	}
	if value, ok := ceu.mutation.Extendfield2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield2,
		})
	}
	if ceu.mutation.Extendfield2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldExtendfield2,
		})
	}
	if value, ok := ceu.mutation.Extendfield3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield3,
		})
	}
	if ceu.mutation.Extendfield3Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldExtendfield3,
		})
	}
	if value, ok := ceu.mutation.Extendfield4(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield4,
		})
	}
	if ceu.mutation.Extendfield4Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldExtendfield4,
		})
	}
	if value, ok := ceu.mutation.Extendfield5(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield5,
		})
	}
	if ceu.mutation.Extendfield5Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldExtendfield5,
		})
	}
	if value, ok := ceu.mutation.Roomid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldRoomid,
		})
	}
	if value, ok := ceu.mutation.AddedRoomid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldRoomid,
		})
	}
	if value, ok := ceu.mutation.Equiptype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquiptype,
		})
	}
	if value, ok := ceu.mutation.AddedEquiptype(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquiptype,
		})
	}
	if value, ok := ceu.mutation.Sampleinterval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldSampleinterval,
		})
	}
	if value, ok := ceu.mutation.AddedSampleinterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldSampleinterval,
		})
	}
	if value, ok := ceu.mutation.Libname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldLibname,
		})
	}
	if value, ok := ceu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldDescription,
		})
	}
	if ceu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldDescription,
		})
	}
	if value, ok := ceu.mutation.Equipaddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquipaddress,
		})
	}
	if value, ok := ceu.mutation.AddedEquipaddress(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquipaddress,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cfgequipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CfgEquipmentUpdateOne is the builder for updating a single CfgEquipment entity.
type CfgEquipmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CfgEquipmentMutation
}

// SetEquipid sets the "equipid" field.
func (ceuo *CfgEquipmentUpdateOne) SetEquipid(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.ResetEquipid()
	ceuo.mutation.SetEquipid(i)
	return ceuo
}

// AddEquipid adds i to the "equipid" field.
func (ceuo *CfgEquipmentUpdateOne) AddEquipid(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.AddEquipid(i)
	return ceuo
}

// SetPortid sets the "portid" field.
func (ceuo *CfgEquipmentUpdateOne) SetPortid(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.ResetPortid()
	ceuo.mutation.SetPortid(i)
	return ceuo
}

// AddPortid adds i to the "portid" field.
func (ceuo *CfgEquipmentUpdateOne) AddPortid(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.AddPortid(i)
	return ceuo
}

// SetMonitorunitid sets the "monitorunitid" field.
func (ceuo *CfgEquipmentUpdateOne) SetMonitorunitid(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.ResetMonitorunitid()
	ceuo.mutation.SetMonitorunitid(i)
	return ceuo
}

// AddMonitorunitid adds i to the "monitorunitid" field.
func (ceuo *CfgEquipmentUpdateOne) AddMonitorunitid(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.AddMonitorunitid(i)
	return ceuo
}

// SetEquiptemplateid sets the "equiptemplateid" field.
func (ceuo *CfgEquipmentUpdateOne) SetEquiptemplateid(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.ResetEquiptemplateid()
	ceuo.mutation.SetEquiptemplateid(i)
	return ceuo
}

// AddEquiptemplateid adds i to the "equiptemplateid" field.
func (ceuo *CfgEquipmentUpdateOne) AddEquiptemplateid(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.AddEquiptemplateid(i)
	return ceuo
}

// SetEquipname sets the "equipname" field.
func (ceuo *CfgEquipmentUpdateOne) SetEquipname(s string) *CfgEquipmentUpdateOne {
	ceuo.mutation.SetEquipname(s)
	return ceuo
}

// SetExportsetting sets the "exportsetting" field.
func (ceuo *CfgEquipmentUpdateOne) SetExportsetting(s string) *CfgEquipmentUpdateOne {
	ceuo.mutation.SetExportsetting(s)
	return ceuo
}

// SetNillableExportsetting sets the "exportsetting" field if the given value is not nil.
func (ceuo *CfgEquipmentUpdateOne) SetNillableExportsetting(s *string) *CfgEquipmentUpdateOne {
	if s != nil {
		ceuo.SetExportsetting(*s)
	}
	return ceuo
}

// ClearExportsetting clears the value of the "exportsetting" field.
func (ceuo *CfgEquipmentUpdateOne) ClearExportsetting() *CfgEquipmentUpdateOne {
	ceuo.mutation.ClearExportsetting()
	return ceuo
}

// SetEventlocked sets the "eventlocked" field.
func (ceuo *CfgEquipmentUpdateOne) SetEventlocked(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.ResetEventlocked()
	ceuo.mutation.SetEventlocked(i)
	return ceuo
}

// SetNillableEventlocked sets the "eventlocked" field if the given value is not nil.
func (ceuo *CfgEquipmentUpdateOne) SetNillableEventlocked(i *int) *CfgEquipmentUpdateOne {
	if i != nil {
		ceuo.SetEventlocked(*i)
	}
	return ceuo
}

// AddEventlocked adds i to the "eventlocked" field.
func (ceuo *CfgEquipmentUpdateOne) AddEventlocked(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.AddEventlocked(i)
	return ceuo
}

// SetControllocked sets the "controllocked" field.
func (ceuo *CfgEquipmentUpdateOne) SetControllocked(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.ResetControllocked()
	ceuo.mutation.SetControllocked(i)
	return ceuo
}

// SetNillableControllocked sets the "controllocked" field if the given value is not nil.
func (ceuo *CfgEquipmentUpdateOne) SetNillableControllocked(i *int) *CfgEquipmentUpdateOne {
	if i != nil {
		ceuo.SetControllocked(*i)
	}
	return ceuo
}

// AddControllocked adds i to the "controllocked" field.
func (ceuo *CfgEquipmentUpdateOne) AddControllocked(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.AddControllocked(i)
	return ceuo
}

// SetExtendfield1 sets the "extendfield1" field.
func (ceuo *CfgEquipmentUpdateOne) SetExtendfield1(s string) *CfgEquipmentUpdateOne {
	ceuo.mutation.SetExtendfield1(s)
	return ceuo
}

// SetNillableExtendfield1 sets the "extendfield1" field if the given value is not nil.
func (ceuo *CfgEquipmentUpdateOne) SetNillableExtendfield1(s *string) *CfgEquipmentUpdateOne {
	if s != nil {
		ceuo.SetExtendfield1(*s)
	}
	return ceuo
}

// ClearExtendfield1 clears the value of the "extendfield1" field.
func (ceuo *CfgEquipmentUpdateOne) ClearExtendfield1() *CfgEquipmentUpdateOne {
	ceuo.mutation.ClearExtendfield1()
	return ceuo
}

// SetExtendfield2 sets the "extendfield2" field.
func (ceuo *CfgEquipmentUpdateOne) SetExtendfield2(s string) *CfgEquipmentUpdateOne {
	ceuo.mutation.SetExtendfield2(s)
	return ceuo
}

// SetNillableExtendfield2 sets the "extendfield2" field if the given value is not nil.
func (ceuo *CfgEquipmentUpdateOne) SetNillableExtendfield2(s *string) *CfgEquipmentUpdateOne {
	if s != nil {
		ceuo.SetExtendfield2(*s)
	}
	return ceuo
}

// ClearExtendfield2 clears the value of the "extendfield2" field.
func (ceuo *CfgEquipmentUpdateOne) ClearExtendfield2() *CfgEquipmentUpdateOne {
	ceuo.mutation.ClearExtendfield2()
	return ceuo
}

// SetExtendfield3 sets the "extendfield3" field.
func (ceuo *CfgEquipmentUpdateOne) SetExtendfield3(s string) *CfgEquipmentUpdateOne {
	ceuo.mutation.SetExtendfield3(s)
	return ceuo
}

// SetNillableExtendfield3 sets the "extendfield3" field if the given value is not nil.
func (ceuo *CfgEquipmentUpdateOne) SetNillableExtendfield3(s *string) *CfgEquipmentUpdateOne {
	if s != nil {
		ceuo.SetExtendfield3(*s)
	}
	return ceuo
}

// ClearExtendfield3 clears the value of the "extendfield3" field.
func (ceuo *CfgEquipmentUpdateOne) ClearExtendfield3() *CfgEquipmentUpdateOne {
	ceuo.mutation.ClearExtendfield3()
	return ceuo
}

// SetExtendfield4 sets the "extendfield4" field.
func (ceuo *CfgEquipmentUpdateOne) SetExtendfield4(s string) *CfgEquipmentUpdateOne {
	ceuo.mutation.SetExtendfield4(s)
	return ceuo
}

// SetNillableExtendfield4 sets the "extendfield4" field if the given value is not nil.
func (ceuo *CfgEquipmentUpdateOne) SetNillableExtendfield4(s *string) *CfgEquipmentUpdateOne {
	if s != nil {
		ceuo.SetExtendfield4(*s)
	}
	return ceuo
}

// ClearExtendfield4 clears the value of the "extendfield4" field.
func (ceuo *CfgEquipmentUpdateOne) ClearExtendfield4() *CfgEquipmentUpdateOne {
	ceuo.mutation.ClearExtendfield4()
	return ceuo
}

// SetExtendfield5 sets the "extendfield5" field.
func (ceuo *CfgEquipmentUpdateOne) SetExtendfield5(s string) *CfgEquipmentUpdateOne {
	ceuo.mutation.SetExtendfield5(s)
	return ceuo
}

// SetNillableExtendfield5 sets the "extendfield5" field if the given value is not nil.
func (ceuo *CfgEquipmentUpdateOne) SetNillableExtendfield5(s *string) *CfgEquipmentUpdateOne {
	if s != nil {
		ceuo.SetExtendfield5(*s)
	}
	return ceuo
}

// ClearExtendfield5 clears the value of the "extendfield5" field.
func (ceuo *CfgEquipmentUpdateOne) ClearExtendfield5() *CfgEquipmentUpdateOne {
	ceuo.mutation.ClearExtendfield5()
	return ceuo
}

// SetRoomid sets the "roomid" field.
func (ceuo *CfgEquipmentUpdateOne) SetRoomid(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.ResetRoomid()
	ceuo.mutation.SetRoomid(i)
	return ceuo
}

// AddRoomid adds i to the "roomid" field.
func (ceuo *CfgEquipmentUpdateOne) AddRoomid(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.AddRoomid(i)
	return ceuo
}

// SetEquiptype sets the "equiptype" field.
func (ceuo *CfgEquipmentUpdateOne) SetEquiptype(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.ResetEquiptype()
	ceuo.mutation.SetEquiptype(i)
	return ceuo
}

// AddEquiptype adds i to the "equiptype" field.
func (ceuo *CfgEquipmentUpdateOne) AddEquiptype(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.AddEquiptype(i)
	return ceuo
}

// SetSampleinterval sets the "sampleinterval" field.
func (ceuo *CfgEquipmentUpdateOne) SetSampleinterval(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.ResetSampleinterval()
	ceuo.mutation.SetSampleinterval(i)
	return ceuo
}

// AddSampleinterval adds i to the "sampleinterval" field.
func (ceuo *CfgEquipmentUpdateOne) AddSampleinterval(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.AddSampleinterval(i)
	return ceuo
}

// SetLibname sets the "libname" field.
func (ceuo *CfgEquipmentUpdateOne) SetLibname(s string) *CfgEquipmentUpdateOne {
	ceuo.mutation.SetLibname(s)
	return ceuo
}

// SetDescription sets the "description" field.
func (ceuo *CfgEquipmentUpdateOne) SetDescription(s string) *CfgEquipmentUpdateOne {
	ceuo.mutation.SetDescription(s)
	return ceuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ceuo *CfgEquipmentUpdateOne) SetNillableDescription(s *string) *CfgEquipmentUpdateOne {
	if s != nil {
		ceuo.SetDescription(*s)
	}
	return ceuo
}

// ClearDescription clears the value of the "description" field.
func (ceuo *CfgEquipmentUpdateOne) ClearDescription() *CfgEquipmentUpdateOne {
	ceuo.mutation.ClearDescription()
	return ceuo
}

// SetEquipaddress sets the "equipaddress" field.
func (ceuo *CfgEquipmentUpdateOne) SetEquipaddress(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.ResetEquipaddress()
	ceuo.mutation.SetEquipaddress(i)
	return ceuo
}

// SetNillableEquipaddress sets the "equipaddress" field if the given value is not nil.
func (ceuo *CfgEquipmentUpdateOne) SetNillableEquipaddress(i *int) *CfgEquipmentUpdateOne {
	if i != nil {
		ceuo.SetEquipaddress(*i)
	}
	return ceuo
}

// AddEquipaddress adds i to the "equipaddress" field.
func (ceuo *CfgEquipmentUpdateOne) AddEquipaddress(i int) *CfgEquipmentUpdateOne {
	ceuo.mutation.AddEquipaddress(i)
	return ceuo
}

// Mutation returns the CfgEquipmentMutation object of the builder.
func (ceuo *CfgEquipmentUpdateOne) Mutation() *CfgEquipmentMutation {
	return ceuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ceuo *CfgEquipmentUpdateOne) Select(field string, fields ...string) *CfgEquipmentUpdateOne {
	ceuo.fields = append([]string{field}, fields...)
	return ceuo
}

// Save executes the query and returns the updated CfgEquipment entity.
func (ceuo *CfgEquipmentUpdateOne) Save(ctx context.Context) (*CfgEquipment, error) {
	var (
		err  error
		node *CfgEquipment
	)
	if len(ceuo.hooks) == 0 {
		node, err = ceuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CfgEquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ceuo.mutation = mutation
			node, err = ceuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ceuo.hooks) - 1; i >= 0; i-- {
			if ceuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ceuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ceuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CfgEquipment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CfgEquipmentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceuo *CfgEquipmentUpdateOne) SaveX(ctx context.Context) *CfgEquipment {
	node, err := ceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ceuo *CfgEquipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := ceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceuo *CfgEquipmentUpdateOne) ExecX(ctx context.Context) {
	if err := ceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ceuo *CfgEquipmentUpdateOne) sqlSave(ctx context.Context) (_node *CfgEquipment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cfgequipment.Table,
			Columns: cfgequipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cfgequipment.FieldID,
			},
		},
	}
	id, ok := ceuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CfgEquipment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ceuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cfgequipment.FieldID)
		for _, f := range fields {
			if !cfgequipment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cfgequipment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ceuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceuo.mutation.Equipid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquipid,
		})
	}
	if value, ok := ceuo.mutation.AddedEquipid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquipid,
		})
	}
	if value, ok := ceuo.mutation.Portid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldPortid,
		})
	}
	if value, ok := ceuo.mutation.AddedPortid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldPortid,
		})
	}
	if value, ok := ceuo.mutation.Monitorunitid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldMonitorunitid,
		})
	}
	if value, ok := ceuo.mutation.AddedMonitorunitid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldMonitorunitid,
		})
	}
	if value, ok := ceuo.mutation.Equiptemplateid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquiptemplateid,
		})
	}
	if value, ok := ceuo.mutation.AddedEquiptemplateid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquiptemplateid,
		})
	}
	if value, ok := ceuo.mutation.Equipname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldEquipname,
		})
	}
	if value, ok := ceuo.mutation.Exportsetting(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExportsetting,
		})
	}
	if ceuo.mutation.ExportsettingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldExportsetting,
		})
	}
	if value, ok := ceuo.mutation.Eventlocked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEventlocked,
		})
	}
	if value, ok := ceuo.mutation.AddedEventlocked(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEventlocked,
		})
	}
	if value, ok := ceuo.mutation.Controllocked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldControllocked,
		})
	}
	if value, ok := ceuo.mutation.AddedControllocked(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldControllocked,
		})
	}
	if value, ok := ceuo.mutation.Extendfield1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield1,
		})
	}
	if ceuo.mutation.Extendfield1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldExtendfield1,
		})
	}
	if value, ok := ceuo.mutation.Extendfield2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield2,
		})
	}
	if ceuo.mutation.Extendfield2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldExtendfield2,
		})
	}
	if value, ok := ceuo.mutation.Extendfield3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield3,
		})
	}
	if ceuo.mutation.Extendfield3Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldExtendfield3,
		})
	}
	if value, ok := ceuo.mutation.Extendfield4(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield4,
		})
	}
	if ceuo.mutation.Extendfield4Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldExtendfield4,
		})
	}
	if value, ok := ceuo.mutation.Extendfield5(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldExtendfield5,
		})
	}
	if ceuo.mutation.Extendfield5Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldExtendfield5,
		})
	}
	if value, ok := ceuo.mutation.Roomid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldRoomid,
		})
	}
	if value, ok := ceuo.mutation.AddedRoomid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldRoomid,
		})
	}
	if value, ok := ceuo.mutation.Equiptype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquiptype,
		})
	}
	if value, ok := ceuo.mutation.AddedEquiptype(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquiptype,
		})
	}
	if value, ok := ceuo.mutation.Sampleinterval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldSampleinterval,
		})
	}
	if value, ok := ceuo.mutation.AddedSampleinterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldSampleinterval,
		})
	}
	if value, ok := ceuo.mutation.Libname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldLibname,
		})
	}
	if value, ok := ceuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfgequipment.FieldDescription,
		})
	}
	if ceuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cfgequipment.FieldDescription,
		})
	}
	if value, ok := ceuo.mutation.Equipaddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquipaddress,
		})
	}
	if value, ok := ceuo.mutation.AddedEquipaddress(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cfgequipment.FieldEquipaddress,
		})
	}
	_node = &CfgEquipment{config: ceuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cfgequipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
