// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"harvest/app/worker/internal/data/ent/cfgequipment"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CfgEquipment is the model entity for the CfgEquipment schema.
type CfgEquipment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Equipid holds the value of the "equipid" field.
	Equipid int `json:"equipid,omitempty"`
	// Portid holds the value of the "portid" field.
	Portid int `json:"portid,omitempty"`
	// Monitorunitid holds the value of the "monitorunitid" field.
	Monitorunitid int `json:"monitorunitid,omitempty"`
	// Equiptemplateid holds the value of the "equiptemplateid" field.
	Equiptemplateid int `json:"equiptemplateid,omitempty"`
	// Equipname holds the value of the "equipname" field.
	Equipname string `json:"equipname,omitempty"`
	// Exportsetting holds the value of the "exportsetting" field.
	Exportsetting *string `json:"exportsetting,omitempty"`
	// Eventlocked holds the value of the "eventlocked" field.
	Eventlocked int `json:"eventlocked,omitempty"`
	// Controllocked holds the value of the "controllocked" field.
	Controllocked int `json:"controllocked,omitempty"`
	// Extendfield1 holds the value of the "extendfield1" field.
	Extendfield1 string `json:"extendfield1,omitempty"`
	// Extendfield2 holds the value of the "extendfield2" field.
	Extendfield2 string `json:"extendfield2,omitempty"`
	// Extendfield3 holds the value of the "extendfield3" field.
	Extendfield3 string `json:"extendfield3,omitempty"`
	// Extendfield4 holds the value of the "extendfield4" field.
	Extendfield4 string `json:"extendfield4,omitempty"`
	// Extendfield5 holds the value of the "extendfield5" field.
	Extendfield5 string `json:"extendfield5,omitempty"`
	// Roomid holds the value of the "roomid" field.
	Roomid int `json:"roomid,omitempty"`
	// Equiptype holds the value of the "equiptype" field.
	Equiptype int `json:"equiptype,omitempty"`
	// Sampleinterval holds the value of the "sampleinterval" field.
	Sampleinterval int `json:"sampleinterval,omitempty"`
	// Libname holds the value of the "libname" field.
	Libname string `json:"libname,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Equipaddress holds the value of the "equipaddress" field.
	Equipaddress int `json:"equipaddress,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CfgEquipment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cfgequipment.FieldID, cfgequipment.FieldEquipid, cfgequipment.FieldPortid, cfgequipment.FieldMonitorunitid, cfgequipment.FieldEquiptemplateid, cfgequipment.FieldEventlocked, cfgequipment.FieldControllocked, cfgequipment.FieldRoomid, cfgequipment.FieldEquiptype, cfgequipment.FieldSampleinterval, cfgequipment.FieldEquipaddress:
			values[i] = new(sql.NullInt64)
		case cfgequipment.FieldEquipname, cfgequipment.FieldExportsetting, cfgequipment.FieldExtendfield1, cfgequipment.FieldExtendfield2, cfgequipment.FieldExtendfield3, cfgequipment.FieldExtendfield4, cfgequipment.FieldExtendfield5, cfgequipment.FieldLibname, cfgequipment.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CfgEquipment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CfgEquipment fields.
func (ce *CfgEquipment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cfgequipment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ce.ID = int(value.Int64)
		case cfgequipment.FieldEquipid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field equipid", values[i])
			} else if value.Valid {
				ce.Equipid = int(value.Int64)
			}
		case cfgequipment.FieldPortid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field portid", values[i])
			} else if value.Valid {
				ce.Portid = int(value.Int64)
			}
		case cfgequipment.FieldMonitorunitid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field monitorunitid", values[i])
			} else if value.Valid {
				ce.Monitorunitid = int(value.Int64)
			}
		case cfgequipment.FieldEquiptemplateid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field equiptemplateid", values[i])
			} else if value.Valid {
				ce.Equiptemplateid = int(value.Int64)
			}
		case cfgequipment.FieldEquipname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field equipname", values[i])
			} else if value.Valid {
				ce.Equipname = value.String
			}
		case cfgequipment.FieldExportsetting:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exportsetting", values[i])
			} else if value.Valid {
				ce.Exportsetting = new(string)
				*ce.Exportsetting = value.String
			}
		case cfgequipment.FieldEventlocked:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field eventlocked", values[i])
			} else if value.Valid {
				ce.Eventlocked = int(value.Int64)
			}
		case cfgequipment.FieldControllocked:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field controllocked", values[i])
			} else if value.Valid {
				ce.Controllocked = int(value.Int64)
			}
		case cfgequipment.FieldExtendfield1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extendfield1", values[i])
			} else if value.Valid {
				ce.Extendfield1 = value.String
			}
		case cfgequipment.FieldExtendfield2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extendfield2", values[i])
			} else if value.Valid {
				ce.Extendfield2 = value.String
			}
		case cfgequipment.FieldExtendfield3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extendfield3", values[i])
			} else if value.Valid {
				ce.Extendfield3 = value.String
			}
		case cfgequipment.FieldExtendfield4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extendfield4", values[i])
			} else if value.Valid {
				ce.Extendfield4 = value.String
			}
		case cfgequipment.FieldExtendfield5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extendfield5", values[i])
			} else if value.Valid {
				ce.Extendfield5 = value.String
			}
		case cfgequipment.FieldRoomid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field roomid", values[i])
			} else if value.Valid {
				ce.Roomid = int(value.Int64)
			}
		case cfgequipment.FieldEquiptype:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field equiptype", values[i])
			} else if value.Valid {
				ce.Equiptype = int(value.Int64)
			}
		case cfgequipment.FieldSampleinterval:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sampleinterval", values[i])
			} else if value.Valid {
				ce.Sampleinterval = int(value.Int64)
			}
		case cfgequipment.FieldLibname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field libname", values[i])
			} else if value.Valid {
				ce.Libname = value.String
			}
		case cfgequipment.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ce.Description = value.String
			}
		case cfgequipment.FieldEquipaddress:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field equipaddress", values[i])
			} else if value.Valid {
				ce.Equipaddress = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CfgEquipment.
// Note that you need to call CfgEquipment.Unwrap() before calling this method if this CfgEquipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ce *CfgEquipment) Update() *CfgEquipmentUpdateOne {
	return (&CfgEquipmentClient{config: ce.config}).UpdateOne(ce)
}

// Unwrap unwraps the CfgEquipment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ce *CfgEquipment) Unwrap() *CfgEquipment {
	_tx, ok := ce.config.driver.(*txDriver)
	if !ok {
		panic("ent: CfgEquipment is not a transactional entity")
	}
	ce.config.driver = _tx.drv
	return ce
}

// String implements the fmt.Stringer.
func (ce *CfgEquipment) String() string {
	var builder strings.Builder
	builder.WriteString("CfgEquipment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ce.ID))
	builder.WriteString("equipid=")
	builder.WriteString(fmt.Sprintf("%v", ce.Equipid))
	builder.WriteString(", ")
	builder.WriteString("portid=")
	builder.WriteString(fmt.Sprintf("%v", ce.Portid))
	builder.WriteString(", ")
	builder.WriteString("monitorunitid=")
	builder.WriteString(fmt.Sprintf("%v", ce.Monitorunitid))
	builder.WriteString(", ")
	builder.WriteString("equiptemplateid=")
	builder.WriteString(fmt.Sprintf("%v", ce.Equiptemplateid))
	builder.WriteString(", ")
	builder.WriteString("equipname=")
	builder.WriteString(ce.Equipname)
	builder.WriteString(", ")
	if v := ce.Exportsetting; v != nil {
		builder.WriteString("exportsetting=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("eventlocked=")
	builder.WriteString(fmt.Sprintf("%v", ce.Eventlocked))
	builder.WriteString(", ")
	builder.WriteString("controllocked=")
	builder.WriteString(fmt.Sprintf("%v", ce.Controllocked))
	builder.WriteString(", ")
	builder.WriteString("extendfield1=")
	builder.WriteString(ce.Extendfield1)
	builder.WriteString(", ")
	builder.WriteString("extendfield2=")
	builder.WriteString(ce.Extendfield2)
	builder.WriteString(", ")
	builder.WriteString("extendfield3=")
	builder.WriteString(ce.Extendfield3)
	builder.WriteString(", ")
	builder.WriteString("extendfield4=")
	builder.WriteString(ce.Extendfield4)
	builder.WriteString(", ")
	builder.WriteString("extendfield5=")
	builder.WriteString(ce.Extendfield5)
	builder.WriteString(", ")
	builder.WriteString("roomid=")
	builder.WriteString(fmt.Sprintf("%v", ce.Roomid))
	builder.WriteString(", ")
	builder.WriteString("equiptype=")
	builder.WriteString(fmt.Sprintf("%v", ce.Equiptype))
	builder.WriteString(", ")
	builder.WriteString("sampleinterval=")
	builder.WriteString(fmt.Sprintf("%v", ce.Sampleinterval))
	builder.WriteString(", ")
	builder.WriteString("libname=")
	builder.WriteString(ce.Libname)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ce.Description)
	builder.WriteString(", ")
	builder.WriteString("equipaddress=")
	builder.WriteString(fmt.Sprintf("%v", ce.Equipaddress))
	builder.WriteByte(')')
	return builder.String()
}

// CfgEquipments is a parsable slice of CfgEquipment.
type CfgEquipments []*CfgEquipment

func (ce CfgEquipments) config(cfg config) {
	for _i := range ce {
		ce[_i].config = cfg
	}
}
