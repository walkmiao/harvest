// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"harvest/app/worker/internal/data/ent/cfgequipment"
	"harvest/app/worker/internal/data/ent/predicate"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCfgEquipment = "CfgEquipment"
)

// CfgEquipmentMutation represents an operation that mutates the CfgEquipment nodes in the graph.
type CfgEquipmentMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	equipid            *int
	addequipid         *int
	portid             *int
	addportid          *int
	monitorunitid      *int
	addmonitorunitid   *int
	equiptemplateid    *int
	addequiptemplateid *int
	equipname          *string
	exportsetting      *string
	eventlocked        *int
	addeventlocked     *int
	controllocked      *int
	addcontrollocked   *int
	extendfield1       *string
	extendfield2       *string
	extendfield3       *string
	extendfield4       *string
	extendfield5       *string
	roomid             *int
	addroomid          *int
	equiptype          *int
	addequiptype       *int
	sampleinterval     *int
	addsampleinterval  *int
	libname            *string
	description        *string
	equipaddress       *int
	addequipaddress    *int
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*CfgEquipment, error)
	predicates         []predicate.CfgEquipment
}

var _ ent.Mutation = (*CfgEquipmentMutation)(nil)

// cfgequipmentOption allows management of the mutation configuration using functional options.
type cfgequipmentOption func(*CfgEquipmentMutation)

// newCfgEquipmentMutation creates new mutation for the CfgEquipment entity.
func newCfgEquipmentMutation(c config, op Op, opts ...cfgequipmentOption) *CfgEquipmentMutation {
	m := &CfgEquipmentMutation{
		config:        c,
		op:            op,
		typ:           TypeCfgEquipment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCfgEquipmentID sets the ID field of the mutation.
func withCfgEquipmentID(id int) cfgequipmentOption {
	return func(m *CfgEquipmentMutation) {
		var (
			err   error
			once  sync.Once
			value *CfgEquipment
		)
		m.oldValue = func(ctx context.Context) (*CfgEquipment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CfgEquipment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCfgEquipment sets the old CfgEquipment of the mutation.
func withCfgEquipment(node *CfgEquipment) cfgequipmentOption {
	return func(m *CfgEquipmentMutation) {
		m.oldValue = func(context.Context) (*CfgEquipment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CfgEquipmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CfgEquipmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CfgEquipmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CfgEquipmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CfgEquipment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEquipid sets the "equipid" field.
func (m *CfgEquipmentMutation) SetEquipid(i int) {
	m.equipid = &i
	m.addequipid = nil
}

// Equipid returns the value of the "equipid" field in the mutation.
func (m *CfgEquipmentMutation) Equipid() (r int, exists bool) {
	v := m.equipid
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipid returns the old "equipid" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldEquipid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipid: %w", err)
	}
	return oldValue.Equipid, nil
}

// AddEquipid adds i to the "equipid" field.
func (m *CfgEquipmentMutation) AddEquipid(i int) {
	if m.addequipid != nil {
		*m.addequipid += i
	} else {
		m.addequipid = &i
	}
}

// AddedEquipid returns the value that was added to the "equipid" field in this mutation.
func (m *CfgEquipmentMutation) AddedEquipid() (r int, exists bool) {
	v := m.addequipid
	if v == nil {
		return
	}
	return *v, true
}

// ResetEquipid resets all changes to the "equipid" field.
func (m *CfgEquipmentMutation) ResetEquipid() {
	m.equipid = nil
	m.addequipid = nil
}

// SetPortid sets the "portid" field.
func (m *CfgEquipmentMutation) SetPortid(i int) {
	m.portid = &i
	m.addportid = nil
}

// Portid returns the value of the "portid" field in the mutation.
func (m *CfgEquipmentMutation) Portid() (r int, exists bool) {
	v := m.portid
	if v == nil {
		return
	}
	return *v, true
}

// OldPortid returns the old "portid" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldPortid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPortid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPortid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPortid: %w", err)
	}
	return oldValue.Portid, nil
}

// AddPortid adds i to the "portid" field.
func (m *CfgEquipmentMutation) AddPortid(i int) {
	if m.addportid != nil {
		*m.addportid += i
	} else {
		m.addportid = &i
	}
}

// AddedPortid returns the value that was added to the "portid" field in this mutation.
func (m *CfgEquipmentMutation) AddedPortid() (r int, exists bool) {
	v := m.addportid
	if v == nil {
		return
	}
	return *v, true
}

// ResetPortid resets all changes to the "portid" field.
func (m *CfgEquipmentMutation) ResetPortid() {
	m.portid = nil
	m.addportid = nil
}

// SetMonitorunitid sets the "monitorunitid" field.
func (m *CfgEquipmentMutation) SetMonitorunitid(i int) {
	m.monitorunitid = &i
	m.addmonitorunitid = nil
}

// Monitorunitid returns the value of the "monitorunitid" field in the mutation.
func (m *CfgEquipmentMutation) Monitorunitid() (r int, exists bool) {
	v := m.monitorunitid
	if v == nil {
		return
	}
	return *v, true
}

// OldMonitorunitid returns the old "monitorunitid" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldMonitorunitid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMonitorunitid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMonitorunitid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMonitorunitid: %w", err)
	}
	return oldValue.Monitorunitid, nil
}

// AddMonitorunitid adds i to the "monitorunitid" field.
func (m *CfgEquipmentMutation) AddMonitorunitid(i int) {
	if m.addmonitorunitid != nil {
		*m.addmonitorunitid += i
	} else {
		m.addmonitorunitid = &i
	}
}

// AddedMonitorunitid returns the value that was added to the "monitorunitid" field in this mutation.
func (m *CfgEquipmentMutation) AddedMonitorunitid() (r int, exists bool) {
	v := m.addmonitorunitid
	if v == nil {
		return
	}
	return *v, true
}

// ResetMonitorunitid resets all changes to the "monitorunitid" field.
func (m *CfgEquipmentMutation) ResetMonitorunitid() {
	m.monitorunitid = nil
	m.addmonitorunitid = nil
}

// SetEquiptemplateid sets the "equiptemplateid" field.
func (m *CfgEquipmentMutation) SetEquiptemplateid(i int) {
	m.equiptemplateid = &i
	m.addequiptemplateid = nil
}

// Equiptemplateid returns the value of the "equiptemplateid" field in the mutation.
func (m *CfgEquipmentMutation) Equiptemplateid() (r int, exists bool) {
	v := m.equiptemplateid
	if v == nil {
		return
	}
	return *v, true
}

// OldEquiptemplateid returns the old "equiptemplateid" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldEquiptemplateid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquiptemplateid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquiptemplateid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquiptemplateid: %w", err)
	}
	return oldValue.Equiptemplateid, nil
}

// AddEquiptemplateid adds i to the "equiptemplateid" field.
func (m *CfgEquipmentMutation) AddEquiptemplateid(i int) {
	if m.addequiptemplateid != nil {
		*m.addequiptemplateid += i
	} else {
		m.addequiptemplateid = &i
	}
}

// AddedEquiptemplateid returns the value that was added to the "equiptemplateid" field in this mutation.
func (m *CfgEquipmentMutation) AddedEquiptemplateid() (r int, exists bool) {
	v := m.addequiptemplateid
	if v == nil {
		return
	}
	return *v, true
}

// ResetEquiptemplateid resets all changes to the "equiptemplateid" field.
func (m *CfgEquipmentMutation) ResetEquiptemplateid() {
	m.equiptemplateid = nil
	m.addequiptemplateid = nil
}

// SetEquipname sets the "equipname" field.
func (m *CfgEquipmentMutation) SetEquipname(s string) {
	m.equipname = &s
}

// Equipname returns the value of the "equipname" field in the mutation.
func (m *CfgEquipmentMutation) Equipname() (r string, exists bool) {
	v := m.equipname
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipname returns the old "equipname" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldEquipname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipname: %w", err)
	}
	return oldValue.Equipname, nil
}

// ResetEquipname resets all changes to the "equipname" field.
func (m *CfgEquipmentMutation) ResetEquipname() {
	m.equipname = nil
}

// SetExportsetting sets the "exportsetting" field.
func (m *CfgEquipmentMutation) SetExportsetting(s string) {
	m.exportsetting = &s
}

// Exportsetting returns the value of the "exportsetting" field in the mutation.
func (m *CfgEquipmentMutation) Exportsetting() (r string, exists bool) {
	v := m.exportsetting
	if v == nil {
		return
	}
	return *v, true
}

// OldExportsetting returns the old "exportsetting" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldExportsetting(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExportsetting is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExportsetting requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExportsetting: %w", err)
	}
	return oldValue.Exportsetting, nil
}

// ClearExportsetting clears the value of the "exportsetting" field.
func (m *CfgEquipmentMutation) ClearExportsetting() {
	m.exportsetting = nil
	m.clearedFields[cfgequipment.FieldExportsetting] = struct{}{}
}

// ExportsettingCleared returns if the "exportsetting" field was cleared in this mutation.
func (m *CfgEquipmentMutation) ExportsettingCleared() bool {
	_, ok := m.clearedFields[cfgequipment.FieldExportsetting]
	return ok
}

// ResetExportsetting resets all changes to the "exportsetting" field.
func (m *CfgEquipmentMutation) ResetExportsetting() {
	m.exportsetting = nil
	delete(m.clearedFields, cfgequipment.FieldExportsetting)
}

// SetEventlocked sets the "eventlocked" field.
func (m *CfgEquipmentMutation) SetEventlocked(i int) {
	m.eventlocked = &i
	m.addeventlocked = nil
}

// Eventlocked returns the value of the "eventlocked" field in the mutation.
func (m *CfgEquipmentMutation) Eventlocked() (r int, exists bool) {
	v := m.eventlocked
	if v == nil {
		return
	}
	return *v, true
}

// OldEventlocked returns the old "eventlocked" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldEventlocked(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventlocked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventlocked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventlocked: %w", err)
	}
	return oldValue.Eventlocked, nil
}

// AddEventlocked adds i to the "eventlocked" field.
func (m *CfgEquipmentMutation) AddEventlocked(i int) {
	if m.addeventlocked != nil {
		*m.addeventlocked += i
	} else {
		m.addeventlocked = &i
	}
}

// AddedEventlocked returns the value that was added to the "eventlocked" field in this mutation.
func (m *CfgEquipmentMutation) AddedEventlocked() (r int, exists bool) {
	v := m.addeventlocked
	if v == nil {
		return
	}
	return *v, true
}

// ResetEventlocked resets all changes to the "eventlocked" field.
func (m *CfgEquipmentMutation) ResetEventlocked() {
	m.eventlocked = nil
	m.addeventlocked = nil
}

// SetControllocked sets the "controllocked" field.
func (m *CfgEquipmentMutation) SetControllocked(i int) {
	m.controllocked = &i
	m.addcontrollocked = nil
}

// Controllocked returns the value of the "controllocked" field in the mutation.
func (m *CfgEquipmentMutation) Controllocked() (r int, exists bool) {
	v := m.controllocked
	if v == nil {
		return
	}
	return *v, true
}

// OldControllocked returns the old "controllocked" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldControllocked(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldControllocked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldControllocked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldControllocked: %w", err)
	}
	return oldValue.Controllocked, nil
}

// AddControllocked adds i to the "controllocked" field.
func (m *CfgEquipmentMutation) AddControllocked(i int) {
	if m.addcontrollocked != nil {
		*m.addcontrollocked += i
	} else {
		m.addcontrollocked = &i
	}
}

// AddedControllocked returns the value that was added to the "controllocked" field in this mutation.
func (m *CfgEquipmentMutation) AddedControllocked() (r int, exists bool) {
	v := m.addcontrollocked
	if v == nil {
		return
	}
	return *v, true
}

// ResetControllocked resets all changes to the "controllocked" field.
func (m *CfgEquipmentMutation) ResetControllocked() {
	m.controllocked = nil
	m.addcontrollocked = nil
}

// SetExtendfield1 sets the "extendfield1" field.
func (m *CfgEquipmentMutation) SetExtendfield1(s string) {
	m.extendfield1 = &s
}

// Extendfield1 returns the value of the "extendfield1" field in the mutation.
func (m *CfgEquipmentMutation) Extendfield1() (r string, exists bool) {
	v := m.extendfield1
	if v == nil {
		return
	}
	return *v, true
}

// OldExtendfield1 returns the old "extendfield1" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldExtendfield1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtendfield1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtendfield1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtendfield1: %w", err)
	}
	return oldValue.Extendfield1, nil
}

// ClearExtendfield1 clears the value of the "extendfield1" field.
func (m *CfgEquipmentMutation) ClearExtendfield1() {
	m.extendfield1 = nil
	m.clearedFields[cfgequipment.FieldExtendfield1] = struct{}{}
}

// Extendfield1Cleared returns if the "extendfield1" field was cleared in this mutation.
func (m *CfgEquipmentMutation) Extendfield1Cleared() bool {
	_, ok := m.clearedFields[cfgequipment.FieldExtendfield1]
	return ok
}

// ResetExtendfield1 resets all changes to the "extendfield1" field.
func (m *CfgEquipmentMutation) ResetExtendfield1() {
	m.extendfield1 = nil
	delete(m.clearedFields, cfgequipment.FieldExtendfield1)
}

// SetExtendfield2 sets the "extendfield2" field.
func (m *CfgEquipmentMutation) SetExtendfield2(s string) {
	m.extendfield2 = &s
}

// Extendfield2 returns the value of the "extendfield2" field in the mutation.
func (m *CfgEquipmentMutation) Extendfield2() (r string, exists bool) {
	v := m.extendfield2
	if v == nil {
		return
	}
	return *v, true
}

// OldExtendfield2 returns the old "extendfield2" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldExtendfield2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtendfield2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtendfield2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtendfield2: %w", err)
	}
	return oldValue.Extendfield2, nil
}

// ClearExtendfield2 clears the value of the "extendfield2" field.
func (m *CfgEquipmentMutation) ClearExtendfield2() {
	m.extendfield2 = nil
	m.clearedFields[cfgequipment.FieldExtendfield2] = struct{}{}
}

// Extendfield2Cleared returns if the "extendfield2" field was cleared in this mutation.
func (m *CfgEquipmentMutation) Extendfield2Cleared() bool {
	_, ok := m.clearedFields[cfgequipment.FieldExtendfield2]
	return ok
}

// ResetExtendfield2 resets all changes to the "extendfield2" field.
func (m *CfgEquipmentMutation) ResetExtendfield2() {
	m.extendfield2 = nil
	delete(m.clearedFields, cfgequipment.FieldExtendfield2)
}

// SetExtendfield3 sets the "extendfield3" field.
func (m *CfgEquipmentMutation) SetExtendfield3(s string) {
	m.extendfield3 = &s
}

// Extendfield3 returns the value of the "extendfield3" field in the mutation.
func (m *CfgEquipmentMutation) Extendfield3() (r string, exists bool) {
	v := m.extendfield3
	if v == nil {
		return
	}
	return *v, true
}

// OldExtendfield3 returns the old "extendfield3" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldExtendfield3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtendfield3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtendfield3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtendfield3: %w", err)
	}
	return oldValue.Extendfield3, nil
}

// ClearExtendfield3 clears the value of the "extendfield3" field.
func (m *CfgEquipmentMutation) ClearExtendfield3() {
	m.extendfield3 = nil
	m.clearedFields[cfgequipment.FieldExtendfield3] = struct{}{}
}

// Extendfield3Cleared returns if the "extendfield3" field was cleared in this mutation.
func (m *CfgEquipmentMutation) Extendfield3Cleared() bool {
	_, ok := m.clearedFields[cfgequipment.FieldExtendfield3]
	return ok
}

// ResetExtendfield3 resets all changes to the "extendfield3" field.
func (m *CfgEquipmentMutation) ResetExtendfield3() {
	m.extendfield3 = nil
	delete(m.clearedFields, cfgequipment.FieldExtendfield3)
}

// SetExtendfield4 sets the "extendfield4" field.
func (m *CfgEquipmentMutation) SetExtendfield4(s string) {
	m.extendfield4 = &s
}

// Extendfield4 returns the value of the "extendfield4" field in the mutation.
func (m *CfgEquipmentMutation) Extendfield4() (r string, exists bool) {
	v := m.extendfield4
	if v == nil {
		return
	}
	return *v, true
}

// OldExtendfield4 returns the old "extendfield4" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldExtendfield4(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtendfield4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtendfield4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtendfield4: %w", err)
	}
	return oldValue.Extendfield4, nil
}

// ClearExtendfield4 clears the value of the "extendfield4" field.
func (m *CfgEquipmentMutation) ClearExtendfield4() {
	m.extendfield4 = nil
	m.clearedFields[cfgequipment.FieldExtendfield4] = struct{}{}
}

// Extendfield4Cleared returns if the "extendfield4" field was cleared in this mutation.
func (m *CfgEquipmentMutation) Extendfield4Cleared() bool {
	_, ok := m.clearedFields[cfgequipment.FieldExtendfield4]
	return ok
}

// ResetExtendfield4 resets all changes to the "extendfield4" field.
func (m *CfgEquipmentMutation) ResetExtendfield4() {
	m.extendfield4 = nil
	delete(m.clearedFields, cfgequipment.FieldExtendfield4)
}

// SetExtendfield5 sets the "extendfield5" field.
func (m *CfgEquipmentMutation) SetExtendfield5(s string) {
	m.extendfield5 = &s
}

// Extendfield5 returns the value of the "extendfield5" field in the mutation.
func (m *CfgEquipmentMutation) Extendfield5() (r string, exists bool) {
	v := m.extendfield5
	if v == nil {
		return
	}
	return *v, true
}

// OldExtendfield5 returns the old "extendfield5" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldExtendfield5(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtendfield5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtendfield5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtendfield5: %w", err)
	}
	return oldValue.Extendfield5, nil
}

// ClearExtendfield5 clears the value of the "extendfield5" field.
func (m *CfgEquipmentMutation) ClearExtendfield5() {
	m.extendfield5 = nil
	m.clearedFields[cfgequipment.FieldExtendfield5] = struct{}{}
}

// Extendfield5Cleared returns if the "extendfield5" field was cleared in this mutation.
func (m *CfgEquipmentMutation) Extendfield5Cleared() bool {
	_, ok := m.clearedFields[cfgequipment.FieldExtendfield5]
	return ok
}

// ResetExtendfield5 resets all changes to the "extendfield5" field.
func (m *CfgEquipmentMutation) ResetExtendfield5() {
	m.extendfield5 = nil
	delete(m.clearedFields, cfgequipment.FieldExtendfield5)
}

// SetRoomid sets the "roomid" field.
func (m *CfgEquipmentMutation) SetRoomid(i int) {
	m.roomid = &i
	m.addroomid = nil
}

// Roomid returns the value of the "roomid" field in the mutation.
func (m *CfgEquipmentMutation) Roomid() (r int, exists bool) {
	v := m.roomid
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomid returns the old "roomid" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldRoomid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoomid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoomid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomid: %w", err)
	}
	return oldValue.Roomid, nil
}

// AddRoomid adds i to the "roomid" field.
func (m *CfgEquipmentMutation) AddRoomid(i int) {
	if m.addroomid != nil {
		*m.addroomid += i
	} else {
		m.addroomid = &i
	}
}

// AddedRoomid returns the value that was added to the "roomid" field in this mutation.
func (m *CfgEquipmentMutation) AddedRoomid() (r int, exists bool) {
	v := m.addroomid
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoomid resets all changes to the "roomid" field.
func (m *CfgEquipmentMutation) ResetRoomid() {
	m.roomid = nil
	m.addroomid = nil
}

// SetEquiptype sets the "equiptype" field.
func (m *CfgEquipmentMutation) SetEquiptype(i int) {
	m.equiptype = &i
	m.addequiptype = nil
}

// Equiptype returns the value of the "equiptype" field in the mutation.
func (m *CfgEquipmentMutation) Equiptype() (r int, exists bool) {
	v := m.equiptype
	if v == nil {
		return
	}
	return *v, true
}

// OldEquiptype returns the old "equiptype" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldEquiptype(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquiptype is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquiptype requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquiptype: %w", err)
	}
	return oldValue.Equiptype, nil
}

// AddEquiptype adds i to the "equiptype" field.
func (m *CfgEquipmentMutation) AddEquiptype(i int) {
	if m.addequiptype != nil {
		*m.addequiptype += i
	} else {
		m.addequiptype = &i
	}
}

// AddedEquiptype returns the value that was added to the "equiptype" field in this mutation.
func (m *CfgEquipmentMutation) AddedEquiptype() (r int, exists bool) {
	v := m.addequiptype
	if v == nil {
		return
	}
	return *v, true
}

// ResetEquiptype resets all changes to the "equiptype" field.
func (m *CfgEquipmentMutation) ResetEquiptype() {
	m.equiptype = nil
	m.addequiptype = nil
}

// SetSampleinterval sets the "sampleinterval" field.
func (m *CfgEquipmentMutation) SetSampleinterval(i int) {
	m.sampleinterval = &i
	m.addsampleinterval = nil
}

// Sampleinterval returns the value of the "sampleinterval" field in the mutation.
func (m *CfgEquipmentMutation) Sampleinterval() (r int, exists bool) {
	v := m.sampleinterval
	if v == nil {
		return
	}
	return *v, true
}

// OldSampleinterval returns the old "sampleinterval" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldSampleinterval(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSampleinterval is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSampleinterval requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSampleinterval: %w", err)
	}
	return oldValue.Sampleinterval, nil
}

// AddSampleinterval adds i to the "sampleinterval" field.
func (m *CfgEquipmentMutation) AddSampleinterval(i int) {
	if m.addsampleinterval != nil {
		*m.addsampleinterval += i
	} else {
		m.addsampleinterval = &i
	}
}

// AddedSampleinterval returns the value that was added to the "sampleinterval" field in this mutation.
func (m *CfgEquipmentMutation) AddedSampleinterval() (r int, exists bool) {
	v := m.addsampleinterval
	if v == nil {
		return
	}
	return *v, true
}

// ResetSampleinterval resets all changes to the "sampleinterval" field.
func (m *CfgEquipmentMutation) ResetSampleinterval() {
	m.sampleinterval = nil
	m.addsampleinterval = nil
}

// SetLibname sets the "libname" field.
func (m *CfgEquipmentMutation) SetLibname(s string) {
	m.libname = &s
}

// Libname returns the value of the "libname" field in the mutation.
func (m *CfgEquipmentMutation) Libname() (r string, exists bool) {
	v := m.libname
	if v == nil {
		return
	}
	return *v, true
}

// OldLibname returns the old "libname" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldLibname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLibname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLibname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLibname: %w", err)
	}
	return oldValue.Libname, nil
}

// ResetLibname resets all changes to the "libname" field.
func (m *CfgEquipmentMutation) ResetLibname() {
	m.libname = nil
}

// SetDescription sets the "description" field.
func (m *CfgEquipmentMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CfgEquipmentMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *CfgEquipmentMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[cfgequipment.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *CfgEquipmentMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[cfgequipment.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *CfgEquipmentMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, cfgequipment.FieldDescription)
}

// SetEquipaddress sets the "equipaddress" field.
func (m *CfgEquipmentMutation) SetEquipaddress(i int) {
	m.equipaddress = &i
	m.addequipaddress = nil
}

// Equipaddress returns the value of the "equipaddress" field in the mutation.
func (m *CfgEquipmentMutation) Equipaddress() (r int, exists bool) {
	v := m.equipaddress
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipaddress returns the old "equipaddress" field's value of the CfgEquipment entity.
// If the CfgEquipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CfgEquipmentMutation) OldEquipaddress(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipaddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipaddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipaddress: %w", err)
	}
	return oldValue.Equipaddress, nil
}

// AddEquipaddress adds i to the "equipaddress" field.
func (m *CfgEquipmentMutation) AddEquipaddress(i int) {
	if m.addequipaddress != nil {
		*m.addequipaddress += i
	} else {
		m.addequipaddress = &i
	}
}

// AddedEquipaddress returns the value that was added to the "equipaddress" field in this mutation.
func (m *CfgEquipmentMutation) AddedEquipaddress() (r int, exists bool) {
	v := m.addequipaddress
	if v == nil {
		return
	}
	return *v, true
}

// ResetEquipaddress resets all changes to the "equipaddress" field.
func (m *CfgEquipmentMutation) ResetEquipaddress() {
	m.equipaddress = nil
	m.addequipaddress = nil
}

// Where appends a list predicates to the CfgEquipmentMutation builder.
func (m *CfgEquipmentMutation) Where(ps ...predicate.CfgEquipment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CfgEquipmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CfgEquipment).
func (m *CfgEquipmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CfgEquipmentMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.equipid != nil {
		fields = append(fields, cfgequipment.FieldEquipid)
	}
	if m.portid != nil {
		fields = append(fields, cfgequipment.FieldPortid)
	}
	if m.monitorunitid != nil {
		fields = append(fields, cfgequipment.FieldMonitorunitid)
	}
	if m.equiptemplateid != nil {
		fields = append(fields, cfgequipment.FieldEquiptemplateid)
	}
	if m.equipname != nil {
		fields = append(fields, cfgequipment.FieldEquipname)
	}
	if m.exportsetting != nil {
		fields = append(fields, cfgequipment.FieldExportsetting)
	}
	if m.eventlocked != nil {
		fields = append(fields, cfgequipment.FieldEventlocked)
	}
	if m.controllocked != nil {
		fields = append(fields, cfgequipment.FieldControllocked)
	}
	if m.extendfield1 != nil {
		fields = append(fields, cfgequipment.FieldExtendfield1)
	}
	if m.extendfield2 != nil {
		fields = append(fields, cfgequipment.FieldExtendfield2)
	}
	if m.extendfield3 != nil {
		fields = append(fields, cfgequipment.FieldExtendfield3)
	}
	if m.extendfield4 != nil {
		fields = append(fields, cfgequipment.FieldExtendfield4)
	}
	if m.extendfield5 != nil {
		fields = append(fields, cfgequipment.FieldExtendfield5)
	}
	if m.roomid != nil {
		fields = append(fields, cfgequipment.FieldRoomid)
	}
	if m.equiptype != nil {
		fields = append(fields, cfgequipment.FieldEquiptype)
	}
	if m.sampleinterval != nil {
		fields = append(fields, cfgequipment.FieldSampleinterval)
	}
	if m.libname != nil {
		fields = append(fields, cfgequipment.FieldLibname)
	}
	if m.description != nil {
		fields = append(fields, cfgequipment.FieldDescription)
	}
	if m.equipaddress != nil {
		fields = append(fields, cfgequipment.FieldEquipaddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CfgEquipmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cfgequipment.FieldEquipid:
		return m.Equipid()
	case cfgequipment.FieldPortid:
		return m.Portid()
	case cfgequipment.FieldMonitorunitid:
		return m.Monitorunitid()
	case cfgequipment.FieldEquiptemplateid:
		return m.Equiptemplateid()
	case cfgequipment.FieldEquipname:
		return m.Equipname()
	case cfgequipment.FieldExportsetting:
		return m.Exportsetting()
	case cfgequipment.FieldEventlocked:
		return m.Eventlocked()
	case cfgequipment.FieldControllocked:
		return m.Controllocked()
	case cfgequipment.FieldExtendfield1:
		return m.Extendfield1()
	case cfgequipment.FieldExtendfield2:
		return m.Extendfield2()
	case cfgequipment.FieldExtendfield3:
		return m.Extendfield3()
	case cfgequipment.FieldExtendfield4:
		return m.Extendfield4()
	case cfgequipment.FieldExtendfield5:
		return m.Extendfield5()
	case cfgequipment.FieldRoomid:
		return m.Roomid()
	case cfgequipment.FieldEquiptype:
		return m.Equiptype()
	case cfgequipment.FieldSampleinterval:
		return m.Sampleinterval()
	case cfgequipment.FieldLibname:
		return m.Libname()
	case cfgequipment.FieldDescription:
		return m.Description()
	case cfgequipment.FieldEquipaddress:
		return m.Equipaddress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CfgEquipmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cfgequipment.FieldEquipid:
		return m.OldEquipid(ctx)
	case cfgequipment.FieldPortid:
		return m.OldPortid(ctx)
	case cfgequipment.FieldMonitorunitid:
		return m.OldMonitorunitid(ctx)
	case cfgequipment.FieldEquiptemplateid:
		return m.OldEquiptemplateid(ctx)
	case cfgequipment.FieldEquipname:
		return m.OldEquipname(ctx)
	case cfgequipment.FieldExportsetting:
		return m.OldExportsetting(ctx)
	case cfgequipment.FieldEventlocked:
		return m.OldEventlocked(ctx)
	case cfgequipment.FieldControllocked:
		return m.OldControllocked(ctx)
	case cfgequipment.FieldExtendfield1:
		return m.OldExtendfield1(ctx)
	case cfgequipment.FieldExtendfield2:
		return m.OldExtendfield2(ctx)
	case cfgequipment.FieldExtendfield3:
		return m.OldExtendfield3(ctx)
	case cfgequipment.FieldExtendfield4:
		return m.OldExtendfield4(ctx)
	case cfgequipment.FieldExtendfield5:
		return m.OldExtendfield5(ctx)
	case cfgequipment.FieldRoomid:
		return m.OldRoomid(ctx)
	case cfgequipment.FieldEquiptype:
		return m.OldEquiptype(ctx)
	case cfgequipment.FieldSampleinterval:
		return m.OldSampleinterval(ctx)
	case cfgequipment.FieldLibname:
		return m.OldLibname(ctx)
	case cfgequipment.FieldDescription:
		return m.OldDescription(ctx)
	case cfgequipment.FieldEquipaddress:
		return m.OldEquipaddress(ctx)
	}
	return nil, fmt.Errorf("unknown CfgEquipment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CfgEquipmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cfgequipment.FieldEquipid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipid(v)
		return nil
	case cfgequipment.FieldPortid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPortid(v)
		return nil
	case cfgequipment.FieldMonitorunitid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMonitorunitid(v)
		return nil
	case cfgequipment.FieldEquiptemplateid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquiptemplateid(v)
		return nil
	case cfgequipment.FieldEquipname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipname(v)
		return nil
	case cfgequipment.FieldExportsetting:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExportsetting(v)
		return nil
	case cfgequipment.FieldEventlocked:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventlocked(v)
		return nil
	case cfgequipment.FieldControllocked:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetControllocked(v)
		return nil
	case cfgequipment.FieldExtendfield1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtendfield1(v)
		return nil
	case cfgequipment.FieldExtendfield2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtendfield2(v)
		return nil
	case cfgequipment.FieldExtendfield3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtendfield3(v)
		return nil
	case cfgequipment.FieldExtendfield4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtendfield4(v)
		return nil
	case cfgequipment.FieldExtendfield5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtendfield5(v)
		return nil
	case cfgequipment.FieldRoomid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomid(v)
		return nil
	case cfgequipment.FieldEquiptype:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquiptype(v)
		return nil
	case cfgequipment.FieldSampleinterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSampleinterval(v)
		return nil
	case cfgequipment.FieldLibname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLibname(v)
		return nil
	case cfgequipment.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case cfgequipment.FieldEquipaddress:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipaddress(v)
		return nil
	}
	return fmt.Errorf("unknown CfgEquipment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CfgEquipmentMutation) AddedFields() []string {
	var fields []string
	if m.addequipid != nil {
		fields = append(fields, cfgequipment.FieldEquipid)
	}
	if m.addportid != nil {
		fields = append(fields, cfgequipment.FieldPortid)
	}
	if m.addmonitorunitid != nil {
		fields = append(fields, cfgequipment.FieldMonitorunitid)
	}
	if m.addequiptemplateid != nil {
		fields = append(fields, cfgequipment.FieldEquiptemplateid)
	}
	if m.addeventlocked != nil {
		fields = append(fields, cfgequipment.FieldEventlocked)
	}
	if m.addcontrollocked != nil {
		fields = append(fields, cfgequipment.FieldControllocked)
	}
	if m.addroomid != nil {
		fields = append(fields, cfgequipment.FieldRoomid)
	}
	if m.addequiptype != nil {
		fields = append(fields, cfgequipment.FieldEquiptype)
	}
	if m.addsampleinterval != nil {
		fields = append(fields, cfgequipment.FieldSampleinterval)
	}
	if m.addequipaddress != nil {
		fields = append(fields, cfgequipment.FieldEquipaddress)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CfgEquipmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cfgequipment.FieldEquipid:
		return m.AddedEquipid()
	case cfgequipment.FieldPortid:
		return m.AddedPortid()
	case cfgequipment.FieldMonitorunitid:
		return m.AddedMonitorunitid()
	case cfgequipment.FieldEquiptemplateid:
		return m.AddedEquiptemplateid()
	case cfgequipment.FieldEventlocked:
		return m.AddedEventlocked()
	case cfgequipment.FieldControllocked:
		return m.AddedControllocked()
	case cfgequipment.FieldRoomid:
		return m.AddedRoomid()
	case cfgequipment.FieldEquiptype:
		return m.AddedEquiptype()
	case cfgequipment.FieldSampleinterval:
		return m.AddedSampleinterval()
	case cfgequipment.FieldEquipaddress:
		return m.AddedEquipaddress()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CfgEquipmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cfgequipment.FieldEquipid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEquipid(v)
		return nil
	case cfgequipment.FieldPortid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPortid(v)
		return nil
	case cfgequipment.FieldMonitorunitid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMonitorunitid(v)
		return nil
	case cfgequipment.FieldEquiptemplateid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEquiptemplateid(v)
		return nil
	case cfgequipment.FieldEventlocked:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEventlocked(v)
		return nil
	case cfgequipment.FieldControllocked:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddControllocked(v)
		return nil
	case cfgequipment.FieldRoomid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoomid(v)
		return nil
	case cfgequipment.FieldEquiptype:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEquiptype(v)
		return nil
	case cfgequipment.FieldSampleinterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSampleinterval(v)
		return nil
	case cfgequipment.FieldEquipaddress:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEquipaddress(v)
		return nil
	}
	return fmt.Errorf("unknown CfgEquipment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CfgEquipmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cfgequipment.FieldExportsetting) {
		fields = append(fields, cfgequipment.FieldExportsetting)
	}
	if m.FieldCleared(cfgequipment.FieldExtendfield1) {
		fields = append(fields, cfgequipment.FieldExtendfield1)
	}
	if m.FieldCleared(cfgequipment.FieldExtendfield2) {
		fields = append(fields, cfgequipment.FieldExtendfield2)
	}
	if m.FieldCleared(cfgequipment.FieldExtendfield3) {
		fields = append(fields, cfgequipment.FieldExtendfield3)
	}
	if m.FieldCleared(cfgequipment.FieldExtendfield4) {
		fields = append(fields, cfgequipment.FieldExtendfield4)
	}
	if m.FieldCleared(cfgequipment.FieldExtendfield5) {
		fields = append(fields, cfgequipment.FieldExtendfield5)
	}
	if m.FieldCleared(cfgequipment.FieldDescription) {
		fields = append(fields, cfgequipment.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CfgEquipmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CfgEquipmentMutation) ClearField(name string) error {
	switch name {
	case cfgequipment.FieldExportsetting:
		m.ClearExportsetting()
		return nil
	case cfgequipment.FieldExtendfield1:
		m.ClearExtendfield1()
		return nil
	case cfgequipment.FieldExtendfield2:
		m.ClearExtendfield2()
		return nil
	case cfgequipment.FieldExtendfield3:
		m.ClearExtendfield3()
		return nil
	case cfgequipment.FieldExtendfield4:
		m.ClearExtendfield4()
		return nil
	case cfgequipment.FieldExtendfield5:
		m.ClearExtendfield5()
		return nil
	case cfgequipment.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown CfgEquipment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CfgEquipmentMutation) ResetField(name string) error {
	switch name {
	case cfgequipment.FieldEquipid:
		m.ResetEquipid()
		return nil
	case cfgequipment.FieldPortid:
		m.ResetPortid()
		return nil
	case cfgequipment.FieldMonitorunitid:
		m.ResetMonitorunitid()
		return nil
	case cfgequipment.FieldEquiptemplateid:
		m.ResetEquiptemplateid()
		return nil
	case cfgequipment.FieldEquipname:
		m.ResetEquipname()
		return nil
	case cfgequipment.FieldExportsetting:
		m.ResetExportsetting()
		return nil
	case cfgequipment.FieldEventlocked:
		m.ResetEventlocked()
		return nil
	case cfgequipment.FieldControllocked:
		m.ResetControllocked()
		return nil
	case cfgequipment.FieldExtendfield1:
		m.ResetExtendfield1()
		return nil
	case cfgequipment.FieldExtendfield2:
		m.ResetExtendfield2()
		return nil
	case cfgequipment.FieldExtendfield3:
		m.ResetExtendfield3()
		return nil
	case cfgequipment.FieldExtendfield4:
		m.ResetExtendfield4()
		return nil
	case cfgequipment.FieldExtendfield5:
		m.ResetExtendfield5()
		return nil
	case cfgequipment.FieldRoomid:
		m.ResetRoomid()
		return nil
	case cfgequipment.FieldEquiptype:
		m.ResetEquiptype()
		return nil
	case cfgequipment.FieldSampleinterval:
		m.ResetSampleinterval()
		return nil
	case cfgequipment.FieldLibname:
		m.ResetLibname()
		return nil
	case cfgequipment.FieldDescription:
		m.ResetDescription()
		return nil
	case cfgequipment.FieldEquipaddress:
		m.ResetEquipaddress()
		return nil
	}
	return fmt.Errorf("unknown CfgEquipment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CfgEquipmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CfgEquipmentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CfgEquipmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CfgEquipmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CfgEquipmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CfgEquipmentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CfgEquipmentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CfgEquipment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CfgEquipmentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CfgEquipment edge %s", name)
}
