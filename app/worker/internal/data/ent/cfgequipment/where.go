// Code generated by ent, DO NOT EDIT.

package cfgequipment

import (
	"harvest/app/worker/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Equipid applies equality check predicate on the "equipid" field. It's identical to EquipidEQ.
func Equipid(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipid), v))
	})
}

// Portid applies equality check predicate on the "portid" field. It's identical to PortidEQ.
func Portid(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPortid), v))
	})
}

// Monitorunitid applies equality check predicate on the "monitorunitid" field. It's identical to MonitorunitidEQ.
func Monitorunitid(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonitorunitid), v))
	})
}

// Equiptemplateid applies equality check predicate on the "equiptemplateid" field. It's identical to EquiptemplateidEQ.
func Equiptemplateid(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquiptemplateid), v))
	})
}

// Equipname applies equality check predicate on the "equipname" field. It's identical to EquipnameEQ.
func Equipname(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipname), v))
	})
}

// Exportsetting applies equality check predicate on the "exportsetting" field. It's identical to ExportsettingEQ.
func Exportsetting(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExportsetting), v))
	})
}

// Eventlocked applies equality check predicate on the "eventlocked" field. It's identical to EventlockedEQ.
func Eventlocked(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventlocked), v))
	})
}

// Controllocked applies equality check predicate on the "controllocked" field. It's identical to ControllockedEQ.
func Controllocked(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldControllocked), v))
	})
}

// Extendfield1 applies equality check predicate on the "extendfield1" field. It's identical to Extendfield1EQ.
func Extendfield1(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtendfield1), v))
	})
}

// Extendfield2 applies equality check predicate on the "extendfield2" field. It's identical to Extendfield2EQ.
func Extendfield2(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtendfield2), v))
	})
}

// Extendfield3 applies equality check predicate on the "extendfield3" field. It's identical to Extendfield3EQ.
func Extendfield3(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtendfield3), v))
	})
}

// Extendfield4 applies equality check predicate on the "extendfield4" field. It's identical to Extendfield4EQ.
func Extendfield4(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtendfield4), v))
	})
}

// Extendfield5 applies equality check predicate on the "extendfield5" field. It's identical to Extendfield5EQ.
func Extendfield5(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtendfield5), v))
	})
}

// Roomid applies equality check predicate on the "roomid" field. It's identical to RoomidEQ.
func Roomid(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomid), v))
	})
}

// Equiptype applies equality check predicate on the "equiptype" field. It's identical to EquiptypeEQ.
func Equiptype(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquiptype), v))
	})
}

// Sampleinterval applies equality check predicate on the "sampleinterval" field. It's identical to SampleintervalEQ.
func Sampleinterval(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSampleinterval), v))
	})
}

// Libname applies equality check predicate on the "libname" field. It's identical to LibnameEQ.
func Libname(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLibname), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Equipaddress applies equality check predicate on the "equipaddress" field. It's identical to EquipaddressEQ.
func Equipaddress(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipaddress), v))
	})
}

// EquipidEQ applies the EQ predicate on the "equipid" field.
func EquipidEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipid), v))
	})
}

// EquipidNEQ applies the NEQ predicate on the "equipid" field.
func EquipidNEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEquipid), v))
	})
}

// EquipidIn applies the In predicate on the "equipid" field.
func EquipidIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEquipid), v...))
	})
}

// EquipidNotIn applies the NotIn predicate on the "equipid" field.
func EquipidNotIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEquipid), v...))
	})
}

// EquipidGT applies the GT predicate on the "equipid" field.
func EquipidGT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEquipid), v))
	})
}

// EquipidGTE applies the GTE predicate on the "equipid" field.
func EquipidGTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEquipid), v))
	})
}

// EquipidLT applies the LT predicate on the "equipid" field.
func EquipidLT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEquipid), v))
	})
}

// EquipidLTE applies the LTE predicate on the "equipid" field.
func EquipidLTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEquipid), v))
	})
}

// PortidEQ applies the EQ predicate on the "portid" field.
func PortidEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPortid), v))
	})
}

// PortidNEQ applies the NEQ predicate on the "portid" field.
func PortidNEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPortid), v))
	})
}

// PortidIn applies the In predicate on the "portid" field.
func PortidIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPortid), v...))
	})
}

// PortidNotIn applies the NotIn predicate on the "portid" field.
func PortidNotIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPortid), v...))
	})
}

// PortidGT applies the GT predicate on the "portid" field.
func PortidGT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPortid), v))
	})
}

// PortidGTE applies the GTE predicate on the "portid" field.
func PortidGTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPortid), v))
	})
}

// PortidLT applies the LT predicate on the "portid" field.
func PortidLT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPortid), v))
	})
}

// PortidLTE applies the LTE predicate on the "portid" field.
func PortidLTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPortid), v))
	})
}

// MonitorunitidEQ applies the EQ predicate on the "monitorunitid" field.
func MonitorunitidEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonitorunitid), v))
	})
}

// MonitorunitidNEQ applies the NEQ predicate on the "monitorunitid" field.
func MonitorunitidNEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMonitorunitid), v))
	})
}

// MonitorunitidIn applies the In predicate on the "monitorunitid" field.
func MonitorunitidIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMonitorunitid), v...))
	})
}

// MonitorunitidNotIn applies the NotIn predicate on the "monitorunitid" field.
func MonitorunitidNotIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMonitorunitid), v...))
	})
}

// MonitorunitidGT applies the GT predicate on the "monitorunitid" field.
func MonitorunitidGT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMonitorunitid), v))
	})
}

// MonitorunitidGTE applies the GTE predicate on the "monitorunitid" field.
func MonitorunitidGTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMonitorunitid), v))
	})
}

// MonitorunitidLT applies the LT predicate on the "monitorunitid" field.
func MonitorunitidLT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMonitorunitid), v))
	})
}

// MonitorunitidLTE applies the LTE predicate on the "monitorunitid" field.
func MonitorunitidLTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMonitorunitid), v))
	})
}

// EquiptemplateidEQ applies the EQ predicate on the "equiptemplateid" field.
func EquiptemplateidEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquiptemplateid), v))
	})
}

// EquiptemplateidNEQ applies the NEQ predicate on the "equiptemplateid" field.
func EquiptemplateidNEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEquiptemplateid), v))
	})
}

// EquiptemplateidIn applies the In predicate on the "equiptemplateid" field.
func EquiptemplateidIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEquiptemplateid), v...))
	})
}

// EquiptemplateidNotIn applies the NotIn predicate on the "equiptemplateid" field.
func EquiptemplateidNotIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEquiptemplateid), v...))
	})
}

// EquiptemplateidGT applies the GT predicate on the "equiptemplateid" field.
func EquiptemplateidGT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEquiptemplateid), v))
	})
}

// EquiptemplateidGTE applies the GTE predicate on the "equiptemplateid" field.
func EquiptemplateidGTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEquiptemplateid), v))
	})
}

// EquiptemplateidLT applies the LT predicate on the "equiptemplateid" field.
func EquiptemplateidLT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEquiptemplateid), v))
	})
}

// EquiptemplateidLTE applies the LTE predicate on the "equiptemplateid" field.
func EquiptemplateidLTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEquiptemplateid), v))
	})
}

// EquipnameEQ applies the EQ predicate on the "equipname" field.
func EquipnameEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipname), v))
	})
}

// EquipnameNEQ applies the NEQ predicate on the "equipname" field.
func EquipnameNEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEquipname), v))
	})
}

// EquipnameIn applies the In predicate on the "equipname" field.
func EquipnameIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEquipname), v...))
	})
}

// EquipnameNotIn applies the NotIn predicate on the "equipname" field.
func EquipnameNotIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEquipname), v...))
	})
}

// EquipnameGT applies the GT predicate on the "equipname" field.
func EquipnameGT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEquipname), v))
	})
}

// EquipnameGTE applies the GTE predicate on the "equipname" field.
func EquipnameGTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEquipname), v))
	})
}

// EquipnameLT applies the LT predicate on the "equipname" field.
func EquipnameLT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEquipname), v))
	})
}

// EquipnameLTE applies the LTE predicate on the "equipname" field.
func EquipnameLTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEquipname), v))
	})
}

// EquipnameContains applies the Contains predicate on the "equipname" field.
func EquipnameContains(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEquipname), v))
	})
}

// EquipnameHasPrefix applies the HasPrefix predicate on the "equipname" field.
func EquipnameHasPrefix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEquipname), v))
	})
}

// EquipnameHasSuffix applies the HasSuffix predicate on the "equipname" field.
func EquipnameHasSuffix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEquipname), v))
	})
}

// EquipnameEqualFold applies the EqualFold predicate on the "equipname" field.
func EquipnameEqualFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEquipname), v))
	})
}

// EquipnameContainsFold applies the ContainsFold predicate on the "equipname" field.
func EquipnameContainsFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEquipname), v))
	})
}

// ExportsettingEQ applies the EQ predicate on the "exportsetting" field.
func ExportsettingEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExportsetting), v))
	})
}

// ExportsettingNEQ applies the NEQ predicate on the "exportsetting" field.
func ExportsettingNEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExportsetting), v))
	})
}

// ExportsettingIn applies the In predicate on the "exportsetting" field.
func ExportsettingIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExportsetting), v...))
	})
}

// ExportsettingNotIn applies the NotIn predicate on the "exportsetting" field.
func ExportsettingNotIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExportsetting), v...))
	})
}

// ExportsettingGT applies the GT predicate on the "exportsetting" field.
func ExportsettingGT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExportsetting), v))
	})
}

// ExportsettingGTE applies the GTE predicate on the "exportsetting" field.
func ExportsettingGTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExportsetting), v))
	})
}

// ExportsettingLT applies the LT predicate on the "exportsetting" field.
func ExportsettingLT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExportsetting), v))
	})
}

// ExportsettingLTE applies the LTE predicate on the "exportsetting" field.
func ExportsettingLTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExportsetting), v))
	})
}

// ExportsettingContains applies the Contains predicate on the "exportsetting" field.
func ExportsettingContains(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExportsetting), v))
	})
}

// ExportsettingHasPrefix applies the HasPrefix predicate on the "exportsetting" field.
func ExportsettingHasPrefix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExportsetting), v))
	})
}

// ExportsettingHasSuffix applies the HasSuffix predicate on the "exportsetting" field.
func ExportsettingHasSuffix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExportsetting), v))
	})
}

// ExportsettingIsNil applies the IsNil predicate on the "exportsetting" field.
func ExportsettingIsNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExportsetting)))
	})
}

// ExportsettingNotNil applies the NotNil predicate on the "exportsetting" field.
func ExportsettingNotNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExportsetting)))
	})
}

// ExportsettingEqualFold applies the EqualFold predicate on the "exportsetting" field.
func ExportsettingEqualFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExportsetting), v))
	})
}

// ExportsettingContainsFold applies the ContainsFold predicate on the "exportsetting" field.
func ExportsettingContainsFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExportsetting), v))
	})
}

// EventlockedEQ applies the EQ predicate on the "eventlocked" field.
func EventlockedEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventlocked), v))
	})
}

// EventlockedNEQ applies the NEQ predicate on the "eventlocked" field.
func EventlockedNEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventlocked), v))
	})
}

// EventlockedIn applies the In predicate on the "eventlocked" field.
func EventlockedIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEventlocked), v...))
	})
}

// EventlockedNotIn applies the NotIn predicate on the "eventlocked" field.
func EventlockedNotIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEventlocked), v...))
	})
}

// EventlockedGT applies the GT predicate on the "eventlocked" field.
func EventlockedGT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventlocked), v))
	})
}

// EventlockedGTE applies the GTE predicate on the "eventlocked" field.
func EventlockedGTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventlocked), v))
	})
}

// EventlockedLT applies the LT predicate on the "eventlocked" field.
func EventlockedLT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventlocked), v))
	})
}

// EventlockedLTE applies the LTE predicate on the "eventlocked" field.
func EventlockedLTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventlocked), v))
	})
}

// ControllockedEQ applies the EQ predicate on the "controllocked" field.
func ControllockedEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldControllocked), v))
	})
}

// ControllockedNEQ applies the NEQ predicate on the "controllocked" field.
func ControllockedNEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldControllocked), v))
	})
}

// ControllockedIn applies the In predicate on the "controllocked" field.
func ControllockedIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldControllocked), v...))
	})
}

// ControllockedNotIn applies the NotIn predicate on the "controllocked" field.
func ControllockedNotIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldControllocked), v...))
	})
}

// ControllockedGT applies the GT predicate on the "controllocked" field.
func ControllockedGT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldControllocked), v))
	})
}

// ControllockedGTE applies the GTE predicate on the "controllocked" field.
func ControllockedGTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldControllocked), v))
	})
}

// ControllockedLT applies the LT predicate on the "controllocked" field.
func ControllockedLT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldControllocked), v))
	})
}

// ControllockedLTE applies the LTE predicate on the "controllocked" field.
func ControllockedLTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldControllocked), v))
	})
}

// Extendfield1EQ applies the EQ predicate on the "extendfield1" field.
func Extendfield1EQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtendfield1), v))
	})
}

// Extendfield1NEQ applies the NEQ predicate on the "extendfield1" field.
func Extendfield1NEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtendfield1), v))
	})
}

// Extendfield1In applies the In predicate on the "extendfield1" field.
func Extendfield1In(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExtendfield1), v...))
	})
}

// Extendfield1NotIn applies the NotIn predicate on the "extendfield1" field.
func Extendfield1NotIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExtendfield1), v...))
	})
}

// Extendfield1GT applies the GT predicate on the "extendfield1" field.
func Extendfield1GT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtendfield1), v))
	})
}

// Extendfield1GTE applies the GTE predicate on the "extendfield1" field.
func Extendfield1GTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtendfield1), v))
	})
}

// Extendfield1LT applies the LT predicate on the "extendfield1" field.
func Extendfield1LT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtendfield1), v))
	})
}

// Extendfield1LTE applies the LTE predicate on the "extendfield1" field.
func Extendfield1LTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtendfield1), v))
	})
}

// Extendfield1Contains applies the Contains predicate on the "extendfield1" field.
func Extendfield1Contains(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtendfield1), v))
	})
}

// Extendfield1HasPrefix applies the HasPrefix predicate on the "extendfield1" field.
func Extendfield1HasPrefix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtendfield1), v))
	})
}

// Extendfield1HasSuffix applies the HasSuffix predicate on the "extendfield1" field.
func Extendfield1HasSuffix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtendfield1), v))
	})
}

// Extendfield1IsNil applies the IsNil predicate on the "extendfield1" field.
func Extendfield1IsNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExtendfield1)))
	})
}

// Extendfield1NotNil applies the NotNil predicate on the "extendfield1" field.
func Extendfield1NotNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExtendfield1)))
	})
}

// Extendfield1EqualFold applies the EqualFold predicate on the "extendfield1" field.
func Extendfield1EqualFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtendfield1), v))
	})
}

// Extendfield1ContainsFold applies the ContainsFold predicate on the "extendfield1" field.
func Extendfield1ContainsFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtendfield1), v))
	})
}

// Extendfield2EQ applies the EQ predicate on the "extendfield2" field.
func Extendfield2EQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtendfield2), v))
	})
}

// Extendfield2NEQ applies the NEQ predicate on the "extendfield2" field.
func Extendfield2NEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtendfield2), v))
	})
}

// Extendfield2In applies the In predicate on the "extendfield2" field.
func Extendfield2In(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExtendfield2), v...))
	})
}

// Extendfield2NotIn applies the NotIn predicate on the "extendfield2" field.
func Extendfield2NotIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExtendfield2), v...))
	})
}

// Extendfield2GT applies the GT predicate on the "extendfield2" field.
func Extendfield2GT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtendfield2), v))
	})
}

// Extendfield2GTE applies the GTE predicate on the "extendfield2" field.
func Extendfield2GTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtendfield2), v))
	})
}

// Extendfield2LT applies the LT predicate on the "extendfield2" field.
func Extendfield2LT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtendfield2), v))
	})
}

// Extendfield2LTE applies the LTE predicate on the "extendfield2" field.
func Extendfield2LTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtendfield2), v))
	})
}

// Extendfield2Contains applies the Contains predicate on the "extendfield2" field.
func Extendfield2Contains(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtendfield2), v))
	})
}

// Extendfield2HasPrefix applies the HasPrefix predicate on the "extendfield2" field.
func Extendfield2HasPrefix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtendfield2), v))
	})
}

// Extendfield2HasSuffix applies the HasSuffix predicate on the "extendfield2" field.
func Extendfield2HasSuffix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtendfield2), v))
	})
}

// Extendfield2IsNil applies the IsNil predicate on the "extendfield2" field.
func Extendfield2IsNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExtendfield2)))
	})
}

// Extendfield2NotNil applies the NotNil predicate on the "extendfield2" field.
func Extendfield2NotNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExtendfield2)))
	})
}

// Extendfield2EqualFold applies the EqualFold predicate on the "extendfield2" field.
func Extendfield2EqualFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtendfield2), v))
	})
}

// Extendfield2ContainsFold applies the ContainsFold predicate on the "extendfield2" field.
func Extendfield2ContainsFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtendfield2), v))
	})
}

// Extendfield3EQ applies the EQ predicate on the "extendfield3" field.
func Extendfield3EQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtendfield3), v))
	})
}

// Extendfield3NEQ applies the NEQ predicate on the "extendfield3" field.
func Extendfield3NEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtendfield3), v))
	})
}

// Extendfield3In applies the In predicate on the "extendfield3" field.
func Extendfield3In(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExtendfield3), v...))
	})
}

// Extendfield3NotIn applies the NotIn predicate on the "extendfield3" field.
func Extendfield3NotIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExtendfield3), v...))
	})
}

// Extendfield3GT applies the GT predicate on the "extendfield3" field.
func Extendfield3GT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtendfield3), v))
	})
}

// Extendfield3GTE applies the GTE predicate on the "extendfield3" field.
func Extendfield3GTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtendfield3), v))
	})
}

// Extendfield3LT applies the LT predicate on the "extendfield3" field.
func Extendfield3LT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtendfield3), v))
	})
}

// Extendfield3LTE applies the LTE predicate on the "extendfield3" field.
func Extendfield3LTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtendfield3), v))
	})
}

// Extendfield3Contains applies the Contains predicate on the "extendfield3" field.
func Extendfield3Contains(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtendfield3), v))
	})
}

// Extendfield3HasPrefix applies the HasPrefix predicate on the "extendfield3" field.
func Extendfield3HasPrefix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtendfield3), v))
	})
}

// Extendfield3HasSuffix applies the HasSuffix predicate on the "extendfield3" field.
func Extendfield3HasSuffix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtendfield3), v))
	})
}

// Extendfield3IsNil applies the IsNil predicate on the "extendfield3" field.
func Extendfield3IsNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExtendfield3)))
	})
}

// Extendfield3NotNil applies the NotNil predicate on the "extendfield3" field.
func Extendfield3NotNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExtendfield3)))
	})
}

// Extendfield3EqualFold applies the EqualFold predicate on the "extendfield3" field.
func Extendfield3EqualFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtendfield3), v))
	})
}

// Extendfield3ContainsFold applies the ContainsFold predicate on the "extendfield3" field.
func Extendfield3ContainsFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtendfield3), v))
	})
}

// Extendfield4EQ applies the EQ predicate on the "extendfield4" field.
func Extendfield4EQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtendfield4), v))
	})
}

// Extendfield4NEQ applies the NEQ predicate on the "extendfield4" field.
func Extendfield4NEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtendfield4), v))
	})
}

// Extendfield4In applies the In predicate on the "extendfield4" field.
func Extendfield4In(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExtendfield4), v...))
	})
}

// Extendfield4NotIn applies the NotIn predicate on the "extendfield4" field.
func Extendfield4NotIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExtendfield4), v...))
	})
}

// Extendfield4GT applies the GT predicate on the "extendfield4" field.
func Extendfield4GT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtendfield4), v))
	})
}

// Extendfield4GTE applies the GTE predicate on the "extendfield4" field.
func Extendfield4GTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtendfield4), v))
	})
}

// Extendfield4LT applies the LT predicate on the "extendfield4" field.
func Extendfield4LT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtendfield4), v))
	})
}

// Extendfield4LTE applies the LTE predicate on the "extendfield4" field.
func Extendfield4LTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtendfield4), v))
	})
}

// Extendfield4Contains applies the Contains predicate on the "extendfield4" field.
func Extendfield4Contains(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtendfield4), v))
	})
}

// Extendfield4HasPrefix applies the HasPrefix predicate on the "extendfield4" field.
func Extendfield4HasPrefix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtendfield4), v))
	})
}

// Extendfield4HasSuffix applies the HasSuffix predicate on the "extendfield4" field.
func Extendfield4HasSuffix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtendfield4), v))
	})
}

// Extendfield4IsNil applies the IsNil predicate on the "extendfield4" field.
func Extendfield4IsNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExtendfield4)))
	})
}

// Extendfield4NotNil applies the NotNil predicate on the "extendfield4" field.
func Extendfield4NotNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExtendfield4)))
	})
}

// Extendfield4EqualFold applies the EqualFold predicate on the "extendfield4" field.
func Extendfield4EqualFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtendfield4), v))
	})
}

// Extendfield4ContainsFold applies the ContainsFold predicate on the "extendfield4" field.
func Extendfield4ContainsFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtendfield4), v))
	})
}

// Extendfield5EQ applies the EQ predicate on the "extendfield5" field.
func Extendfield5EQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtendfield5), v))
	})
}

// Extendfield5NEQ applies the NEQ predicate on the "extendfield5" field.
func Extendfield5NEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtendfield5), v))
	})
}

// Extendfield5In applies the In predicate on the "extendfield5" field.
func Extendfield5In(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExtendfield5), v...))
	})
}

// Extendfield5NotIn applies the NotIn predicate on the "extendfield5" field.
func Extendfield5NotIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExtendfield5), v...))
	})
}

// Extendfield5GT applies the GT predicate on the "extendfield5" field.
func Extendfield5GT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtendfield5), v))
	})
}

// Extendfield5GTE applies the GTE predicate on the "extendfield5" field.
func Extendfield5GTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtendfield5), v))
	})
}

// Extendfield5LT applies the LT predicate on the "extendfield5" field.
func Extendfield5LT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtendfield5), v))
	})
}

// Extendfield5LTE applies the LTE predicate on the "extendfield5" field.
func Extendfield5LTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtendfield5), v))
	})
}

// Extendfield5Contains applies the Contains predicate on the "extendfield5" field.
func Extendfield5Contains(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtendfield5), v))
	})
}

// Extendfield5HasPrefix applies the HasPrefix predicate on the "extendfield5" field.
func Extendfield5HasPrefix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtendfield5), v))
	})
}

// Extendfield5HasSuffix applies the HasSuffix predicate on the "extendfield5" field.
func Extendfield5HasSuffix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtendfield5), v))
	})
}

// Extendfield5IsNil applies the IsNil predicate on the "extendfield5" field.
func Extendfield5IsNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExtendfield5)))
	})
}

// Extendfield5NotNil applies the NotNil predicate on the "extendfield5" field.
func Extendfield5NotNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExtendfield5)))
	})
}

// Extendfield5EqualFold applies the EqualFold predicate on the "extendfield5" field.
func Extendfield5EqualFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtendfield5), v))
	})
}

// Extendfield5ContainsFold applies the ContainsFold predicate on the "extendfield5" field.
func Extendfield5ContainsFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtendfield5), v))
	})
}

// RoomidEQ applies the EQ predicate on the "roomid" field.
func RoomidEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomid), v))
	})
}

// RoomidNEQ applies the NEQ predicate on the "roomid" field.
func RoomidNEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomid), v))
	})
}

// RoomidIn applies the In predicate on the "roomid" field.
func RoomidIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRoomid), v...))
	})
}

// RoomidNotIn applies the NotIn predicate on the "roomid" field.
func RoomidNotIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRoomid), v...))
	})
}

// RoomidGT applies the GT predicate on the "roomid" field.
func RoomidGT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomid), v))
	})
}

// RoomidGTE applies the GTE predicate on the "roomid" field.
func RoomidGTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomid), v))
	})
}

// RoomidLT applies the LT predicate on the "roomid" field.
func RoomidLT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomid), v))
	})
}

// RoomidLTE applies the LTE predicate on the "roomid" field.
func RoomidLTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomid), v))
	})
}

// EquiptypeEQ applies the EQ predicate on the "equiptype" field.
func EquiptypeEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquiptype), v))
	})
}

// EquiptypeNEQ applies the NEQ predicate on the "equiptype" field.
func EquiptypeNEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEquiptype), v))
	})
}

// EquiptypeIn applies the In predicate on the "equiptype" field.
func EquiptypeIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEquiptype), v...))
	})
}

// EquiptypeNotIn applies the NotIn predicate on the "equiptype" field.
func EquiptypeNotIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEquiptype), v...))
	})
}

// EquiptypeGT applies the GT predicate on the "equiptype" field.
func EquiptypeGT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEquiptype), v))
	})
}

// EquiptypeGTE applies the GTE predicate on the "equiptype" field.
func EquiptypeGTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEquiptype), v))
	})
}

// EquiptypeLT applies the LT predicate on the "equiptype" field.
func EquiptypeLT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEquiptype), v))
	})
}

// EquiptypeLTE applies the LTE predicate on the "equiptype" field.
func EquiptypeLTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEquiptype), v))
	})
}

// SampleintervalEQ applies the EQ predicate on the "sampleinterval" field.
func SampleintervalEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSampleinterval), v))
	})
}

// SampleintervalNEQ applies the NEQ predicate on the "sampleinterval" field.
func SampleintervalNEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSampleinterval), v))
	})
}

// SampleintervalIn applies the In predicate on the "sampleinterval" field.
func SampleintervalIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSampleinterval), v...))
	})
}

// SampleintervalNotIn applies the NotIn predicate on the "sampleinterval" field.
func SampleintervalNotIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSampleinterval), v...))
	})
}

// SampleintervalGT applies the GT predicate on the "sampleinterval" field.
func SampleintervalGT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSampleinterval), v))
	})
}

// SampleintervalGTE applies the GTE predicate on the "sampleinterval" field.
func SampleintervalGTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSampleinterval), v))
	})
}

// SampleintervalLT applies the LT predicate on the "sampleinterval" field.
func SampleintervalLT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSampleinterval), v))
	})
}

// SampleintervalLTE applies the LTE predicate on the "sampleinterval" field.
func SampleintervalLTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSampleinterval), v))
	})
}

// LibnameEQ applies the EQ predicate on the "libname" field.
func LibnameEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLibname), v))
	})
}

// LibnameNEQ applies the NEQ predicate on the "libname" field.
func LibnameNEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLibname), v))
	})
}

// LibnameIn applies the In predicate on the "libname" field.
func LibnameIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLibname), v...))
	})
}

// LibnameNotIn applies the NotIn predicate on the "libname" field.
func LibnameNotIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLibname), v...))
	})
}

// LibnameGT applies the GT predicate on the "libname" field.
func LibnameGT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLibname), v))
	})
}

// LibnameGTE applies the GTE predicate on the "libname" field.
func LibnameGTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLibname), v))
	})
}

// LibnameLT applies the LT predicate on the "libname" field.
func LibnameLT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLibname), v))
	})
}

// LibnameLTE applies the LTE predicate on the "libname" field.
func LibnameLTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLibname), v))
	})
}

// LibnameContains applies the Contains predicate on the "libname" field.
func LibnameContains(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLibname), v))
	})
}

// LibnameHasPrefix applies the HasPrefix predicate on the "libname" field.
func LibnameHasPrefix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLibname), v))
	})
}

// LibnameHasSuffix applies the HasSuffix predicate on the "libname" field.
func LibnameHasSuffix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLibname), v))
	})
}

// LibnameEqualFold applies the EqualFold predicate on the "libname" field.
func LibnameEqualFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLibname), v))
	})
}

// LibnameContainsFold applies the ContainsFold predicate on the "libname" field.
func LibnameContainsFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLibname), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// EquipaddressEQ applies the EQ predicate on the "equipaddress" field.
func EquipaddressEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipaddress), v))
	})
}

// EquipaddressNEQ applies the NEQ predicate on the "equipaddress" field.
func EquipaddressNEQ(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEquipaddress), v))
	})
}

// EquipaddressIn applies the In predicate on the "equipaddress" field.
func EquipaddressIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEquipaddress), v...))
	})
}

// EquipaddressNotIn applies the NotIn predicate on the "equipaddress" field.
func EquipaddressNotIn(vs ...int) predicate.CfgEquipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEquipaddress), v...))
	})
}

// EquipaddressGT applies the GT predicate on the "equipaddress" field.
func EquipaddressGT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEquipaddress), v))
	})
}

// EquipaddressGTE applies the GTE predicate on the "equipaddress" field.
func EquipaddressGTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEquipaddress), v))
	})
}

// EquipaddressLT applies the LT predicate on the "equipaddress" field.
func EquipaddressLT(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEquipaddress), v))
	})
}

// EquipaddressLTE applies the LTE predicate on the "equipaddress" field.
func EquipaddressLTE(v int) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEquipaddress), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CfgEquipment) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CfgEquipment) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CfgEquipment) predicate.CfgEquipment {
	return predicate.CfgEquipment(func(s *sql.Selector) {
		p(s.Not())
	})
}
